import OpenAI from 'openai';
import { getModelMaxTokens, calculateSafeTokenLimit, getAvailableModel, estimateCost } from './src/lib/model-utils';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * Sanitiza resposta JSON do GPT removendo markdown e caracteres problem√°ticos
 */
function sanitizeJsonResponse(content: string): string {
  // Remove cercas de c√≥digo markdown
  let cleaned = content.replace(/```json\s*/g, '').replace(/```\s*/g, '');

  // Remove caracteres de controle
  cleaned = cleaned.replace(/[\u0000-\u0008\u000B-\u000C\u000E-\u001F\u007f-\u009f]/g, '');

  // Procura o primeiro { e √∫ltimo }
  const firstBrace = cleaned.indexOf('{');
  const lastBrace = cleaned.lastIndexOf('}');

  if (firstBrace !== -1 && lastBrace !== -1 && firstBrace < lastBrace) {
    cleaned = cleaned.substring(firstBrace, lastBrace + 1);
  }

  return cleaned.trim();
}

/**
 * Valida e melhora a estrutura final do curso usando GPT antes de enviar ao usu√°rio
 */
export async function validateAndImproveFinalStructure(
  courseStructure: any,
  originalSubject: string
): Promise<{
  improvedStructure: any;
  changesApplied: string[];
  validationScore: number;
}> {
  try {
    console.log(`üîç Validando estrutura final do curso para: "${originalSubject}"`);

    // Selecionar modelo dispon√≠vel no in√≠cio
    const selectedModel = getAvailableModel(['gpt-4o', 'gpt-4o-mini', 'gpt-3.5-turbo']);

    // Etapa 1: An√°lise da estrutura atual
    const analysisCompletion = await openai.chat.completions.create({
      model: selectedModel,
      messages: [
        {
          role: 'system',
          content: `Voc√™ √© um especialista em design educacional e revisor de curr√≠culos acad√™micos. Analise a estrutura de curso fornecida e avalie:

1. COMPLETUDE: A estrutura cobre todos os aspectos essenciais do assunto?
2. ORGANIZA√á√ÉO: A sequ√™ncia pedag√≥gica est√° l√≥gica e progressiva?
3. PROFUNDIDADE: Os t√≥picos t√™m o n√≠vel de detalhamento adequado?
4. COER√äNCIA: Todos os m√≥dulos e t√≥picos s√£o relevantes para o assunto?
5. QUALIDADE: A estrutura √© digna de um curso universit√°rio completo?

RETORNE APENAS JSON:
{
  "score": 8.5,
  "needsImprovement": true/false,
  "strengths": ["pontos fortes identificados"],
  "weaknesses": ["problemas encontrados"],
  "missingElements": ["elementos importantes que faltam"],
  "unnecessaryElements": ["elementos que deveriam ser removidos"],
  "improvements": ["melhorias espec√≠ficas a serem feitas"],
  "overallAssessment": "resumo da qualidade geral"
}`
        },
        {
          role: 'user',
          content: `Analise esta estrutura de curso sobre "${originalSubject}":

${JSON.stringify(courseStructure, null, 2)}

Seja rigoroso na an√°lise. Esta estrutura ser√° apresentada ao usu√°rio como um curso universit√°rio completo.`
        }
      ],
      max_tokens: 2000,
      temperature: 0.2,
    });

    const analysisContent = analysisCompletion.choices[0]?.message?.content;
    if (!analysisContent) {
      throw new Error('Falha na an√°lise da estrutura');
    }

    const cleanedContent = sanitizeJsonResponse(analysisContent);
    const analysis = JSON.parse(cleanedContent);
    console.log(`üìä Score da estrutura: ${analysis.score}/10`);
    console.log(`üéØ Precisa melhorias: ${analysis.needsImprovement}`);

    // Se a estrutura j√° est√° boa (score >= 8.5), retorna sem mudan√ßas
    if (!analysis.needsImprovement || analysis.score >= 8.5) {
      console.log('‚úÖ Estrutura aprovada sem necessidade de melhorias');
      return {
        improvedStructure: courseStructure,
        changesApplied: [],
        validationScore: analysis.score
      };
    }

    // Etapa 2: Aplicar melhorias se necess√°rio
    console.log('üîÑ Aplicando melhorias na estrutura do curso...');

    const improvementPrompt = `
MELHORIAS NECESS√ÅRIAS:
${analysis.improvements.map((imp: string, i: number) => `${i + 1}. ${imp}`).join('\n')}

ELEMENTOS FALTANTES:
${analysis.missingElements.map((elem: string, i: number) => `${i + 1}. ${elem}`).join('\n')}

ELEMENTOS DESNECESS√ÅRIOS:
${analysis.unnecessaryElements.map((elem: string, i: number) => `${i + 1}. ${elem}`).join('\n')}

PONTOS FRACOS IDENTIFICADOS:
${analysis.weaknesses.map((weak: string, i: number) => `${i + 1}. ${weak}`).join('\n')}
`;

    // IMPORTANTE: Para estruturas grandes, usar limites seguros baseados no modelo
    const courseStructureStr = JSON.stringify(courseStructure, null, 2);
    const structureSizeKB = courseStructureStr.length / 1024;

    console.log(`üìä Tamanho da estrutura: ${structureSizeKB.toFixed(2)} KB`);

    // Calcular limite seguro de tokens
    const estimatedInputTokens = Math.ceil(courseStructureStr.length / 4);
    const targetOutputTokens = Math.max(4000, estimatedInputTokens); // Target razo√°vel
    const maxTokensToUse = calculateSafeTokenLimit(selectedModel, estimatedInputTokens, targetOutputTokens);

    // Estimar custo
    const estimatedCostUSD = estimateCost(selectedModel, estimatedInputTokens, maxTokensToUse);
    console.log(`üí∞ Custo estimado: $${estimatedCostUSD}`);

    const improvementCompletion = await openai.chat.completions.create({
      model: selectedModel,
      messages: [
        {
          role: 'system',
          content: `Voc√™ √© um especialista em design educacional. Sua tarefa √© MELHORAR a estrutura de curso fornecida com base nas diretrizes espec√≠ficas.

INSTRU√á√ïES:
1. Mantenha a estrutura base (formato JSON)
2. Aplique TODAS as melhorias solicitadas
3. Adicione elementos faltantes mas PRESERVE TODOS OS T√ìPICOS EXISTENTES
4. Remova APENAS elementos claramente desnecess√°rios
5. Reorganize se necess√°rio para melhor sequ√™ncia pedag√≥gica
6. NUNCA reduza o n√∫mero total de t√≥picos - apenas adicione ou reorganize
7. Se a estrutura for muito grande, mantenha o essencial mas n√£o remova conte√∫do

RETORNE APENAS a estrutura melhorada em JSON v√°lido.`
        },
        {
          role: 'user',
          content: `Melhore esta estrutura de curso sobre "${originalSubject}" aplicando as seguintes diretrizes:

${improvementPrompt}

ESTRUTURA ATUAL:
${JSON.stringify(courseStructure, null, 2)}

Aplique todas as melhorias listadas e retorne a estrutura completa aprimorada.`
        }
      ],
      max_tokens: maxTokensToUse,
      temperature: 0.3,
    });

    const improvementContent = improvementCompletion.choices[0]?.message?.content;
    if (!improvementContent) {
      throw new Error('Falha na melhoria da estrutura');
    }

    const cleanedImprovementContent = sanitizeJsonResponse(improvementContent);
    const improvedStructure = JSON.parse(cleanedImprovementContent);

    // Verificar se houve truncamento
    const improvedTopicCount = improvedStructure.modules?.reduce((sum: number, m: any) => sum + (m.topics?.length || 0), 0) || 0;
    const originalTopicCount = courseStructure.modules?.reduce((sum: number, m: any) => sum + (m.topics?.length || 0), 0) || 0;

    if (improvedTopicCount < originalTopicCount) {
      console.warn(`‚ö†Ô∏è Poss√≠vel truncamento detectado: ${originalTopicCount} ‚Üí ${improvedTopicCount} t√≥picos`);
      console.warn(`  Retornando estrutura original para evitar perda de conte√∫do`);

      return {
        improvedStructure: courseStructure, // Retorna original se houve redu√ß√£o
        changesApplied: ['Mantida estrutura original devido a risco de truncamento'],
        validationScore: analysis.score
      };
    }

    console.log(`‚úÖ Estrutura melhorada: ${originalTopicCount} ‚Üí ${improvedTopicCount} t√≥picos`);
    console.log(`üìà Melhorias aplicadas: ${analysis.improvements.length} itens`);

    return {
      improvedStructure,
      changesApplied: analysis.improvements,
      validationScore: analysis.score
    };

  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o final da estrutura:', error);
    // Em caso de erro, retorna estrutura original
    return {
      improvedStructure: courseStructure,
      changesApplied: ['Erro na valida√ß√£o - estrutura original mantida'],
      validationScore: 7.0
    };
  }
}

/**
 * Valida√ß√£o adicional espec√≠fica para assegurar qualidade m√≠nima
 */
export async function ensureMinimumQualityStandards(
  courseStructure: any,
  subject: string
): Promise<any> {
  try {
    console.log(`üèÜ Verificando padr√µes m√≠nimos de qualidade para: "${subject}"`);

    // Selecionar modelo dispon√≠vel
    const selectedModel = getAvailableModel(['gpt-4o', 'gpt-4o-mini', 'gpt-3.5-turbo']);

    const qualityCheck = await openai.chat.completions.create({
      model: selectedModel,
      messages: [
        {
          role: 'system',
          content: `Voc√™ √© um auditor de qualidade educacional. Verifique se a estrutura atende aos padr√µes m√≠nimos:

PADR√ïES OBRIGAT√ìRIOS:
- M√≠nimo 15 m√≥dulos para curso completo
- M√≠nimo 8 t√≥picos por m√≥dulo
- Descri√ß√µes detalhadas e espec√≠ficas
- Sequ√™ncia pedag√≥gica l√≥gica
- Objetivos de aprendizagem claros
- Estimativas realistas de tempo

Se N√ÉO atender aos padr√µes, adicione o que falta mas NUNCA remova conte√∫do existente.
IMPORTANTE: Preserve TODOS os t√≥picos existentes!
RETORNE a estrutura em JSON v√°lido (com adi√ß√µes se necess√°rio, mas sem remo√ß√µes).`
        },
        {
          role: 'user',
          content: `Verifique e corrija esta estrutura para ${subject}:

${JSON.stringify(courseStructure, null, 2)}

Garanta que atende a TODOS os padr√µes m√≠nimos de qualidade.`
        }
      ],
      max_tokens: calculateSafeTokenLimit(selectedModel, 2000, 6000), // Limite seguro baseado no modelo
      temperature: 0.1,
    });

    const qualityContent = qualityCheck.choices[0]?.message?.content;
    if (!qualityContent) {
      return courseStructure;
    }

    const cleanedQualityContent = sanitizeJsonResponse(qualityContent);
    const qualityStructure = JSON.parse(cleanedQualityContent);
    // Verificar se houve perda de conte√∫do
    const originalTopicCount = courseStructure.modules?.reduce((sum: number, m: any) => sum + (m.topics?.length || 0), 0) || 0;
    const qualityTopicCount = qualityStructure.modules?.reduce((sum: number, m: any) => sum + (m.topics?.length || 0), 0) || 0;

    if (qualityTopicCount < originalTopicCount) {
      console.warn(`‚ö†Ô∏è Verifica√ß√£o de qualidade tentou reduzir conte√∫do: ${originalTopicCount} ‚Üí ${qualityTopicCount} t√≥picos`);
      console.warn(`  Mantendo estrutura original para preservar conte√∫do`);
      return courseStructure;
    }

    console.log(`‚úÖ Padr√µes de qualidade aplicados: ${originalTopicCount} ‚Üí ${qualityTopicCount} t√≥picos`);

    return qualityStructure;

  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o de qualidade:', error);
    return courseStructure;
  }
}