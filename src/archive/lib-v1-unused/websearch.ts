/**
 * Web Search Service
 * Fallback para quando Perplexity n√£o estiver dispon√≠vel
 */

interface SearchResult {
  title: string;
  url: string;
  snippet: string;
}

interface SearchOptions {
  maxResults?: number;
  language?: string;
  region?: string;
}

export class WebSearch {
  private apiKey: string | undefined;

  constructor() {
    this.apiKey = process.env.WEB_SEARCH_API_KEY;
  }

  /**
   * Busca na web usando m√∫ltiplas estrat√©gias
   */
  async search(query: string, options: SearchOptions = {}): Promise<SearchResult[]> {
    const { maxResults = 5 } = options;

    try {
      // Estrat√©gia 1: Usar API de busca se configurada
      if (this.apiKey) {
        return await this.searchWithAPI(query, maxResults);
      }

      // Estrat√©gia 2: Fallback para simula√ß√£o/mock
      // Silencioso quando n√£o h√° API configurada (esperado em muitos casos)
      if (process.env.DEBUG_MODE === 'true') {
        console.log(`‚ö†Ô∏è Web search API n√£o configurada, usando dados mock`);
      }
      return this.getMockResults(query);

    } catch (error) {
      console.error('‚ùå Erro na busca web:', error);
      return this.getMockResults(query);
    }
  }

  /**
   * Busca usando API configurada
   */
  private async searchWithAPI(query: string, maxResults: number): Promise<SearchResult[]> {
    // Implementa√ß√£o da API de busca (Google Custom Search, Bing, etc.)
    // Esta √© uma implementa√ß√£o placeholder

    console.log(`üîç Buscando via API: "${query}"`);

    // Aqui voc√™ implementaria a chamada real √† API
    // Por exemplo, Google Custom Search API:
    /*
    const response = await fetch(
      `https://www.googleapis.com/customsearch/v1?key=${this.apiKey}&cx=YOUR_CX&q=${encodeURIComponent(query)}&num=${maxResults}`
    );
    const data = await response.json();

    return data.items?.map((item: any) => ({
      title: item.title,
      url: item.link,
      snippet: item.snippet
    })) || [];
    */

    // Por enquanto, retorna mock
    return this.getMockResults(query);
  }

  /**
   * Retorna resultados mock para desenvolvimento/teste
   */
  private getMockResults(query: string): SearchResult[] {
    const lowerQuery = query.toLowerCase();

    // Mock especializado por tipo de busca
    if (lowerQuery.includes('c√°lculo') || lowerQuery.includes('calculus')) {
      return [
        {
          title: 'C√°lculo 2 - Ementa Completa',
          url: 'https://example.edu/calculus2',
          snippet: 'M√≥dulo 1: T√©cnicas de Integra√ß√£o (substitui√ß√£o, partes, fra√ß√µes parciais). M√≥dulo 2: Integrais Impr√≥prias. M√≥dulo 3: S√©ries e Sequ√™ncias. M√≥dulo 4: Fun√ß√µes de V√°rias Vari√°veis.'
        },
        {
          title: 'Stewart - C√°lculo Volume 2',
          url: 'https://books.example.com/stewart-calculus',
          snippet: 'Cap√≠tulo 7: T√©cnicas de Integra√ß√£o. Cap√≠tulo 8: Aplica√ß√µes da Integral. Cap√≠tulo 11: Sequ√™ncias e S√©ries Infinitas. Cap√≠tulo 14: Derivadas Parciais.'
        }
      ];
    }

    if (lowerQuery.includes('mec√¢nica') || lowerQuery.includes('mechanics')) {
      return [
        {
          title: 'Mec√¢nica Vetorial para Engenheiros - Est√°tica',
          url: 'https://example.edu/mechanics',
          snippet: 'Cap√≠tulo 1: Introdu√ß√£o. Cap√≠tulo 2: Est√°tica de Part√≠culas. Cap√≠tulo 3: Corpos R√≠gidos. Cap√≠tulo 4: Equil√≠brio. Cap√≠tulo 5: An√°lise de Estruturas.'
        }
      ];
    }

    if (lowerQuery.includes('table of contents') || lowerQuery.includes('outline')) {
      return [
        {
          title: 'Sum√°rio do Livro',
          url: 'https://example.com/book-toc',
          snippet: 'Parte I: Fundamentos. Cap√≠tulo 1: Introdu√ß√£o. Cap√≠tulo 2: Conceitos B√°sicos. Parte II: Desenvolvimento. Cap√≠tulo 3: T√©cnicas Intermedi√°rias. Parte III: Aplica√ß√µes Avan√ßadas.'
        }
      ];
    }

    // Resultados gen√©ricos
    return [
      {
        title: `Curso Completo de ${query}`,
        url: 'https://example.edu/course',
        snippet: `Ementa completa do curso de ${query} com todos os t√≥picos essenciais organizados progressivamente.`
      },
      {
        title: `${query} - Material Did√°tico`,
        url: 'https://example.com/material',
        snippet: `Material de refer√™ncia para ${query} incluindo exerc√≠cios, exemplos e aplica√ß√µes pr√°ticas.`
      }
    ];
  }

  /**
   * Busca espec√≠fica para sum√°rios de livros
   */
  async searchBookTOC(bookTitle: string, authors: string): Promise<string | null> {
    const query = `"${bookTitle}" "${authors}" table of contents chapters outline`;
    const results = await this.search(query, { maxResults: 3 });

    for (const result of results) {
      if (result.snippet && result.snippet.length > 100) {
        return result.snippet;
      }
    }

    return null;
  }

  /**
   * Busca espec√≠fica para ementas de disciplinas
   */
  async searchCourseSyllabus(discipline: string, level: string): Promise<string[]> {
    const query = `${discipline} ${level} syllabus curriculum topics university`;
    const results = await this.search(query, { maxResults: 5 });

    return results.map(r => r.snippet).filter(s => s && s.length > 50);
  }
}