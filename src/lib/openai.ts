import OpenAI from 'openai';
import { detectUniversityDiscipline, getExpandedStructureHints } from './university-courses-detector';
import { getAcademicTemplate, adaptTemplateForUserGoal } from './academic-curriculum-templates';
import { generatePerplexityPrompt } from '../../new_functions';
import { validateAndImproveFinalStructure, ensureMinimumQualityStandards } from '../../final_validation';

// Configurar limpeza autom√°tica do cache
if (typeof global !== 'undefined') {
  (async () => {
    try {
      const { setupAutomaticCleanup } = await import('./cache');
      setupAutomaticCleanup(60); // Cleanup a cada 60 minutos
      console.log('üîÑ Cache automatic cleanup configurado');
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao configurar cleanup autom√°tico do cache:', error);
    }
  })();
}
import {
  AulaTextoStructure,
  AulaTextoConfig,
  AulaTextoQualityAssessment,
  RAGContext,
  Prerequisite,
  SupportCourse,
  Module,
  Section,
  BookRecommendation
} from '@/types';
import {
  buildAulaTextoPrompt,
  SYSTEM_PROMPT_AVALIACAO,
  SYSTEM_PROMPT_MELHORIA,
  validateAulaTextoStructure,
  QUALITY_CHECKLIST
} from './prompts/aulaTexto';
import { buildAulaTextoRespondAi } from './prompts/aulaTextoAvancado';
import { generateScoringReport } from './evidence-scoring';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export interface LearningAnalysis {
  courseTitle: string; // T√≠tulo do curso (ex: "C√°lculo A")
  subject: string;
  level: 'beginner' | 'intermediate' | 'advanced';

  // Nova estrutura: Course ‚Üí Module ‚Üí Topic
  modules: Array<{
    title: string; // Ex: "Fun√ß√µes", "Limites"
    description: string;
    order: number;
    estimatedDuration: string;
    learningObjectives: string[];

    // T√≥picos diretamente dentro do m√≥dulo
    topics: Array<{
      title: string; // Ex: "Fun√ß√£o do 1¬∫ Grau"
      description: string;
      detailedDescription: string; // Descri√ß√£o do que ser√° aprendido
      learningObjectives: string[]; // Objetivos espec√≠ficos
      keyTerms: string[]; // Termos-chave para contextualiza√ß√£o
      searchKeywords: string[]; // Para busca contextual no YouTube
      difficulty: 'easy' | 'medium' | 'hard';
      order: number;
      estimatedDuration: string;
    }>;
  }>;

  totalEstimatedHours: number;
  searchQueries: string[];

  // DEPRECATED: Manter para compatibilidade com c√≥digo existente
  topics?: Array<{
    title: string;
    description: string;
    keywords: string[];
    order: number;
  }>;
}

export interface SyllabusData {
  title: string;
  description?: string;
  level: string;
  modules: Array<{
    id: string;
    title: string;
    description?: string;
    order: number;
    estimatedDuration?: string;
    topics: Array<{
      id: string;
      title: string;
      description?: string;
      order: number;
      estimatedDuration?: string;
      subtopics?: string[];
    }>;
  }>;
  totalDuration?: string;
  pedagogicalMetadata?: {
    domainAnalysis?: any;
    validationScore?: number;
    personalizations?: string[];
    improvements?: string[];
    bloomProgression?: number[];
    isFallback?: boolean;
  };
}

/**
 * Extrai o assunto principal da mensagem do usu√°rio
 */
function extractSubjectFromMessage(userMessage: string): string {
  // Remove palavras comuns e extrai o assunto principal
  const cleanMessage = userMessage
    .toLowerCase()
    .replace(/^(quero aprender|aprender|estudar|curso de|curso sobre|como|sobre)\s+/i, '')
    .replace(/\s+(para|da|na|no|de|do|em)\s+.*/i, '')
    .trim();

  return cleanMessage || userMessage.substring(0, 50);
}

/**
 * Gera template din√¢mico UNIVERSAL usando GPT-4 para QUALQUER assunto
 */
async function generateUniversalDynamicTemplate(
  subject: string,
  userMessage: string,
  level: string,
  userProfile?: any,
  contextInfo?: any,
  academicTopics: string[] = [],
  ragContext: string[] = []
): Promise<LearningAnalysis> {
  console.log(`ü§ñ Gerando estrutura universal para: "${subject}"`);

  // Determinar tipo de contexto para personalizar o prompt
  const contextType = determineContextType(subject, userMessage, contextInfo);

  const prompt = `Voc√™ √© um especialista em design educacional. Crie uma estrutura COMPLETA e DETALHADA de aprendizado para "${subject}".

CONTEXTO DO APRENDIZADO:
- Assunto: "${subject}"
- Mensagem original: "${userMessage}"
- N√≠vel do aluno: ${level}
${level === 'beginner' || level === 'intermediate' ? '- IMPORTANTE: Criar curso COMPLETO do INICIANTE ao AVAN√áADO (n√£o apenas o n√≠vel b√°sico)' : ''}
- Objetivo: ${userProfile?.objective || userProfile?.purpose || 'Aprender de forma completa e profunda, equivalente a um curso universit√°rio completo'}
- Tipo de contexto: ${contextType}
${userProfile?.specificObjectives ? `- Objetivos espec√≠ficos: ${userProfile.specificObjectives.join(', ')}` : ''}
${contextInfo?.userContext?.mentionsExam ? '- IMPORTANTE: Aluno mencionou PROVA - incluir prepara√ß√£o para avalia√ß√µes' : ''}
${contextInfo?.userContext?.mentionsProject ? '- IMPORTANTE: Aluno mencionou PROJETO - incluir m√≥dulo pr√°tico' : ''}

CONTEXTO ACAD√äMICO ADICIONAL:
${academicTopics.length > 0 ? `
T√ìPICOS ACAD√äMICOS RECOMENDADOS (baseado em pesquisa web):
${academicTopics.map((topic, i) => `${i + 1}. ${topic}`).join('\n')}

IMPORTANTE: Use estes t√≥picos como REFER√äNCIA para criar m√≥dulos abrangentes e academicamente s√≥lidos.
` : ''}

${ragContext.length > 0 ? `
CONTEXTO DOS DOCUMENTOS ENVIADOS:
${ragContext.slice(0, 5).map((context, i) => `[Fonte ${i + 1}] ${context.substring(0, 200)}...`).join('\n\n')}

IMPORTANTE: Integre o conhecimento dos documentos enviados na estrutura do curso.
` : ''}

REQUISITOS OBRIGAT√ìRIOS PARA CURSO COMPLETO:
1. Criar estrutura COMPLETA E ABRANGENTE equivalente a um SEMESTRE UNIVERSIT√ÅRIO INTEIRO
2. INICIANTE ao AVAN√áADO: Come√ßar do zero absoluto e chegar ao n√≠vel avan√ßado/profissional
3. M√çNIMO 15-25 m√≥dulos principais para cobertura completa
4. Cada m√≥dulo deve ter 8-15 t√≥picos espec√≠ficos e detalhados
5. Total M√çNIMO de 150-300 t√≥picos para garantir ensino completo
6. Progress√£o pedag√≥gica rigorosa: Fundamentos ‚Üí Intermedi√°rio ‚Üí Avan√ßado ‚Üí Aplica√ß√µes
7. OBRIGAT√ìRIO incluir m√≥dulos de: Fundamentos, Teoria, Pr√°tica, Exerc√≠cios, Projetos, Aplica√ß√µes Avan√ßadas
8. Cada t√≥pico deve ser espec√≠fico para 1-2 horas de estudo aprofundado
9. Incluir TODOS os t√≥picos que seriam ensinados em uma universidade de qualidade
10. N√ÉO ECONOMIZAR conte√∫do - ser EXTREMAMENTE ABRANGENTE e COMPLETO

ESTRUTURA OBRIGAT√ìRIA:
{
  "courseTitle": "Curso Completo de [ASSUNTO]",
  "subject": "${subject}",
  "level": "${level}",
  "modules": [
    {
      "title": "NOME DO M√ìDULO EM MAI√öSCULO",
      "description": "Descri√ß√£o detalhada do que ser√° aprendido",
      "order": 1,
      "estimatedDuration": "1-2 semanas",
      "learningObjectives": ["objetivo1", "objetivo2", "objetivo3"],
      "topics": [
        {
          "title": "Nome espec√≠fico do t√≥pico",
          "description": "O que ser√° aprendido neste t√≥pico",
          "detailedDescription": "Descri√ß√£o completa com conceitos e habilidades",
          "learningObjectives": ["objetivo espec√≠fico 1", "objetivo 2"],
          "keyTerms": ["termo1", "termo2", "termo3"],
          "searchKeywords": ["palavra-chave1", "palavra2"],
          "difficulty": "easy|medium|hard",
          "order": 1,
          "estimatedDuration": "1-2 horas"
        }
      ]
    }
  ],
  "totalEstimatedHours": 240,
  "searchQueries": ["query1", "query2", "query3", "query4"]
}

EXEMPLO DE ESTRUTURA PARA REFER√äNCIA:
- Se INICIANTE: Come√ßar com "Introdu√ß√£o e Conceitos B√°sicos" e ir at√© "Aplica√ß√µes Avan√ßadas e Projetos"
- Se INTERMEDI√ÅRIO: Incluir revis√£o b√°sica + conte√∫do intermedi√°rio + avan√ßado
- Se AVAN√áADO: Revis√£o r√°pida + foco em conte√∫do avan√ßado + projetos complexos

LEMBRE-SE: O usu√°rio quer o curso COMPLETO de um semestre universit√°rio, n√£o um resumo!

DIRETRIZES POR TIPO DE CONTEXTO:
${getContextSpecificGuidelines(contextType)}

IMPORTANTE:
- Ser ESPEC√çFICO e DETALHADO em cada t√≥pico
- N√ÉO ser gen√©rico - criar conte√∫do √∫til e pr√°tico
- Adaptar para o n√≠vel ${level} do aluno
- Pensar como um educador experiente
- Garantir progress√£o l√≥gica e pedag√≥gica

Responda APENAS com JSON v√°lido.`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-2024-11-20",
      messages: [
        {
          role: 'system',
          content: 'Voc√™ √© um especialista em design educacional universal. Crie estruturas de aprendizado completas para QUALQUER assunto. Responda APENAS com JSON v√°lido.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: 4000,
      temperature: 0.3,
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }

    // DEBUG: Log do tamanho da resposta e tokens usados
    console.log(`üìä GPT Response Stats (generateUniversalDynamicTemplate):
      - Content length: ${content.length} chars
      - Tokens used: ${completion.usage?.total_tokens || 'unknown'}
      - Completion tokens: ${completion.usage?.completion_tokens || 'unknown'}
      - Prompt tokens: ${completion.usage?.prompt_tokens || 'unknown'}
      - Academic topics provided: ${academicTopics.length}`);

    const cleanContent = sanitizeJsonFromOpenAI(content);
    let analysis: LearningAnalysis;

    try {
      analysis = JSON.parse(cleanContent) as LearningAnalysis;
    } catch (parseError) {
      console.error('‚ùå Erro de parsing JSON:', parseError);
      console.log('üìÑ Conte√∫do que causou erro (primeiros 500 chars):', cleanContent.substring(0, 500));

      // Tentar corre√ß√£o autom√°tica com GPT-4
      try {
        console.log('üîÑ Tentando corre√ß√£o autom√°tica com GPT-4...');
        const correction = await openai.chat.completions.create({
          model: "gpt-4o-mini",
          messages: [
            {
              role: "system",
              content: "Corrija este JSON malformado e retorne APENAS o JSON v√°lido, sem explica√ß√µes:"
            },
            {
              role: "user",
              content: cleanContent.substring(0, 4000) // Limitar tamanho
            }
          ],
          max_tokens: 4000,
          temperature: 0
        });

        const correctedContent = correction.choices[0]?.message?.content;
        if (correctedContent) {
          const correctedClean = sanitizeJsonFromOpenAI(correctedContent);
          analysis = JSON.parse(correctedClean) as LearningAnalysis;
          console.log('‚úÖ JSON corrigido com sucesso pelo GPT-4');
        } else {
          throw new Error('Corre√ß√£o autom√°tica falhou');
        }
      } catch (correctionError) {
        console.error('‚ùå Corre√ß√£o autom√°tica falhou:', correctionError);
        throw new Error(`Falha ao processar JSON da OpenAI: ${parseError}`);
      }
    }

    // Garantir estrutura de compatibilidade
    if (!analysis.topics && analysis.modules) {
      analysis.topics = analysis.modules.flatMap(module =>
        module.topics?.map(topic => ({
          title: topic.title,
          description: topic.description,
          keywords: topic.keyTerms || topic.searchKeywords || [],
          order: topic.order
        })) || []
      );
    }

    // Garantir totalEstimatedHours
    if (!analysis.totalEstimatedHours) {
      analysis.totalEstimatedHours = Math.ceil(
        analysis.modules.reduce((acc, module) =>
          acc + (module.topics?.length || 0), 0
        ) * 1.5
      );
    }

    // DEBUG detalhado da estrutura gerada
    const moduleTopicsCount = analysis.modules?.reduce((acc, m) => acc + (m.topics?.length || 0), 0) || 0;
    console.log(`‚úÖ Estrutura universal gerada:
      - M√≥dulos: ${analysis.modules.length}
      - T√≥picos nos m√≥dulos: ${moduleTopicsCount}
      - T√≥picos array direto: ${analysis.topics?.length || 0}
      - Academic topics fornecidos: ${academicTopics.length}
      - RAG context snippets: ${ragContext.length}`);

    return analysis;

  } catch (error) {
    console.error('‚ùå Erro ao gerar estrutura universal:', error);
    throw error;
  }
}

/**
 * Determina o tipo de contexto para personalizar a gera√ß√£o
 */
function determineContextType(subject: string, userMessage: string, contextInfo?: any): string {
  const subjectLower = subject.toLowerCase();
  const messageLower = userMessage.toLowerCase();

  if (contextInfo?.isUniversityDiscipline) {
    return 'acad√™mico_universit√°rio';
  }

  if (messageLower.includes('programa√ß√£o') || messageLower.includes('programar') ||
      subjectLower.includes('programa√ß√£o') || subjectLower.includes('c√≥digo')) {
    return 't√©cnico_programa√ß√£o';
  }

  if (messageLower.includes('culin√°ria') || messageLower.includes('cozinhar') ||
      subjectLower.includes('culin√°ria') || subjectLower.includes('receita')) {
    return 'pr√°tico_culin√°ria';
  }

  if (messageLower.includes('idioma') || messageLower.includes('l√≠ngua') ||
      messageLower.includes('ingl√™s') || messageLower.includes('espanhol')) {
    return 'idiomas';
  }

  if (messageLower.includes('neg√≥cio') || messageLower.includes('empresa') ||
      messageLower.includes('empreender') || subjectLower.includes('administra√ß√£o')) {
    return 'neg√≥cios';
  }

  return 'geral';
}

/**
 * Retorna diretrizes espec√≠ficas por tipo de contexto
 */
function getContextSpecificGuidelines(contextType: string): string {
  const guidelines = {
    'acad√™mico_universit√°rio': `
- Incluir teoria fundamental e aplica√ß√µes pr√°ticas
- Adicionar m√≥dulo de exerc√≠cios e prepara√ß√£o para provas
- Incluir laborat√≥rio/projetos quando aplic√°vel
- Seguir progress√£o pedag√≥gica universit√°ria rigorosa`,

    't√©cnico_programa√ß√£o': `
- Incluir projetos pr√°ticos em cada m√≥dulo
- Adicionar m√≥dulo de desenvolvimento de portf√≥lio
- Focar em aplica√ß√µes do mundo real
- Incluir boas pr√°ticas e debugging`,

    'pr√°tico_culin√°ria': `
- Incluir receitas pr√°ticas em cada m√≥dulo
- Progress√£o de t√©cnicas b√°sicas para avan√ßadas
- Adicionar m√≥dulo de planejamento de menu
- Incluir seguran√ßa alimentar e t√©cnicas fundamentais`,

    'idiomas': `
- Incluir conversa√ß√£o desde o in√≠cio
- Adicionar m√≥dulos de gram√°tica e vocabul√°rio
- Incluir cultura e contexto
- Progress√£o A1 at√© B2/C1 dependendo do n√≠vel`,

    'neg√≥cios': `
- Incluir estudos de caso reais
- Adicionar m√≥dulo de aplica√ß√£o pr√°tica
- Focar em ROI e resultados mensur√°veis
- Incluir networking e desenvolvimento profissional`,

    'geral': `
- Equilibrar teoria e pr√°tica
- Incluir exerc√≠cios aplicados
- Adicionar projetos quando relevante
- Focar em aplicabilidade no mundo real`
  };

  return guidelines[contextType as keyof typeof guidelines] || guidelines['geral'];
}

/**
 * Gera template din√¢mico completo usando GPT-4 para qualquer disciplina (DEPRECATED - usar generateUniversalDynamicTemplate)
 */
async function generateDynamicTemplate(
  disciplineName: string,
  userMessage: string,
  level: string,
  userProfile?: any,
  userContext?: any
): Promise<LearningAnalysis> {
  console.log(`ü§ñ Gerando template din√¢mico completo para: ${disciplineName}`);

  const prompt = `Voc√™ √© um especialista em design curricular universit√°rio. Crie uma estrutura COMPLETA e DETALHADA de curso para "${disciplineName}".

CONTEXTO DO ALUNO:
- Mensagem original: "${userMessage}"
- N√≠vel: ${level}
- Objetivo: ${userProfile?.objective || 'Aprender de forma completa'}
- Objetivos espec√≠ficos: ${userProfile?.specificObjectives?.join(', ') || 'Dom√≠nio completo da disciplina'}
${userContext?.mentionsExam ? '- IMPORTANTE: Aluno mencionou PROVA - incluir m√≥dulo de exerc√≠cios e prepara√ß√£o' : ''}
${userContext?.mentionsProject ? '- IMPORTANTE: Aluno mencionou PROJETO - incluir m√≥dulo pr√°tico/laborat√≥rio' : ''}

REQUISITOS ESSENCIAIS:
1. Criar estrutura IGUAL ou MELHOR que a de "C√°lculo Num√©rico" (que tem 63 t√≥picos)
2. M√≠nimo de 8-12 m√≥dulos principais
3. Cada m√≥dulo deve ter 5-10 t√≥picos espec√≠ficos
4. Total m√≠nimo de 50-70 t√≥picos
5. Incluir m√≥dulo de exerc√≠cios e prepara√ß√£o para provas
6. Incluir m√≥dulo de laborat√≥rio/pr√°tica quando aplic√°vel
7. Progress√£o pedag√≥gica clara do b√°sico ao avan√ßado
8. Cada t√≥pico deve ser espec√≠fico o suficiente para uma aula de 1-2 horas

ESTRUTURA OBRIGAT√ìRIA:
{
  "courseTitle": "Nome completo do curso",
  "subject": "${disciplineName}",
  "level": "${level}",
  "modules": [
    {
      "title": "NOME DO M√ìDULO EM MAI√öSCULO",
      "description": "Descri√ß√£o detalhada do que ser√° aprendido",
      "order": 1,
      "estimatedDuration": "2-3 semanas",
      "learningObjectives": ["objetivo1", "objetivo2", "objetivo3"],
      "topics": [
        {
          "title": "Nome espec√≠fico do t√≥pico",
          "description": "O que ser√° aprendido neste t√≥pico",
          "detailedDescription": "Descri√ß√£o completa com conceitos, t√©cnicas e aplica√ß√µes",
          "learningObjectives": ["objetivo espec√≠fico 1", "objetivo 2", "objetivo 3"],
          "keyTerms": ["termo1", "termo2", "termo3", "termo4"],
          "searchKeywords": ["palavra-chave1", "palavra2", "palavra3"],
          "difficulty": "easy|medium|hard",
          "order": 1,
          "estimatedDuration": "1-2 horas"
        }
      ]
    }
  ],
  "totalEstimatedHours": 80,
  "searchQueries": ["query1", "query2"]
}

IMPORTANTE:
- Criar estrutura COMPLETA e PROFUNDA
- N√ÉO ser gen√©rico - ser ESPEC√çFICO em cada t√≥pico
- Cobrir TODOS os aspectos importantes da disciplina
- Incluir teoria, pr√°tica, exerc√≠cios e aplica√ß√µes
- Pensar como um professor universit√°rio experiente

Responda APENAS com JSON v√°lido.`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-2024-11-20",
      messages: [
        {
          role: 'system',
          content: 'Voc√™ √© um especialista em design curricular universit√°rio. Crie curr√≠culos completos e detalhados. Responda APENAS com JSON v√°lido.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: 4000,
      temperature: 0.3,
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }

    const cleanContent = sanitizeJsonFromOpenAI(content);
    let analysis: LearningAnalysis;

    try {
      analysis = JSON.parse(cleanContent) as LearningAnalysis;
    } catch (parseError) {
      console.error('‚ùå Erro de parsing JSON:', parseError);
      console.log('üìÑ Conte√∫do que causou erro (primeiros 500 chars):', cleanContent.substring(0, 500));

      // Tentar corre√ß√£o autom√°tica com GPT-4
      try {
        console.log('üîÑ Tentando corre√ß√£o autom√°tica com GPT-4...');
        const correction = await openai.chat.completions.create({
          model: "gpt-4o-mini",
          messages: [
            {
              role: "system",
              content: "Corrija este JSON malformado e retorne APENAS o JSON v√°lido, sem explica√ß√µes:"
            },
            {
              role: "user",
              content: cleanContent.substring(0, 4000) // Limitar tamanho
            }
          ],
          max_tokens: 4000,
          temperature: 0
        });

        const correctedContent = correction.choices[0]?.message?.content;
        if (correctedContent) {
          const correctedClean = sanitizeJsonFromOpenAI(correctedContent);
          analysis = JSON.parse(correctedClean) as LearningAnalysis;
          console.log('‚úÖ JSON corrigido com sucesso pelo GPT-4');
        } else {
          throw new Error('Corre√ß√£o autom√°tica falhou');
        }
      } catch (correctionError) {
        console.error('‚ùå Corre√ß√£o autom√°tica falhou:', correctionError);
        throw new Error(`Falha ao processar JSON da OpenAI: ${parseError}`);
      }
    }

    // Garantir estrutura de compatibilidade
    if (!analysis.topics && analysis.modules) {
      analysis.topics = analysis.modules.flatMap(module =>
        module.topics?.map(topic => ({
          title: topic.title,
          description: topic.description,
          keywords: topic.keyTerms || topic.searchKeywords || [],
          order: topic.order
        })) || []
      );
    }

    // Garantir totalEstimatedHours
    if (!analysis.totalEstimatedHours) {
      analysis.totalEstimatedHours = Math.ceil(
        analysis.modules.reduce((acc, module) =>
          acc + (module.topics?.length || 0), 0
        ) * 1.5
      );
    }

    console.log(`‚úÖ Template din√¢mico gerado: ${analysis.modules.length} m√≥dulos, ${analysis.topics?.length} t√≥picos`);
    return analysis;

  } catch (error) {
    console.error('‚ùå Erro ao gerar template din√¢mico:', error);
    throw error;
  }
}

/**
 * Melhora template baseado no relat√≥rio de valida√ß√£o pedag√≥gica
 */
async function improveTemplateBasedOnValidation(
  template: LearningAnalysis,
  validationReport: any,
  academicTopics: string[],
  ragContext: string[]
): Promise<LearningAnalysis> {
  console.log('üîß Melhorando template baseado na valida√ß√£o pedag√≥gica...');

  const improvementPrompt = `Voc√™ √© um especialista em design educacional. Melhore a estrutura do curso baseado no relat√≥rio de valida√ß√£o.

ESTRUTURA ATUAL:
${JSON.stringify(template, null, 2)}

RELAT√ìRIO DE VALIDA√á√ÉO:
- Score atual: ${validationReport.overallScore}/10
- Falhas cr√≠ticas: ${validationReport.criticalFailures.join(', ')}
- Recomenda√ß√µes: ${validationReport.recommendations.join(', ')}
- Problemas pedag√≥gicos: ${validationReport.pedagogicalIssues.join(', ')}

CONTEXTO ADICIONAL:
${academicTopics.length > 0 ? `T√≥picos acad√™micos: ${academicTopics.slice(0, 10).join(', ')}` : ''}
${ragContext.length > 0 ? `Contexto dos documentos dispon√≠vel` : ''}

INSTRU√á√ïES PARA MELHORIA:
1. Corrija TODAS as falhas cr√≠ticas identificadas
2. Implemente as recomenda√ß√µes do relat√≥rio
3. Mantenha a estrutura JSON igual, apenas melhore o conte√∫do
4. Foque em: sequ√™ncia pedag√≥gica, granularidade apropriada, cobertura completa
5. Se houver problemas de pr√©-requisitos, reordene os m√≥dulos/t√≥picos
6. Se m√≥dulos est√£o muito longos/curtos, ajuste a granularidade

Responda APENAS com o JSON melhorado da estrutura completa:`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: "Voc√™ √© um especialista em design educacional que corrige problemas pedag√≥gicos em curr√≠culos. Responda apenas com JSON v√°lido."
        },
        {
          role: "user",
          content: improvementPrompt
        }
      ],
      max_tokens: 4000,
      temperature: 0.2,
    });

    const improvedContent = completion.choices[0].message.content?.trim();
    if (!improvedContent) {
      throw new Error('Resposta vazia do OpenAI na melhoria');
    }

    const improvedTemplate = JSON.parse(improvedContent);
    console.log('‚úÖ Template melhorado baseado na valida√ß√£o');
    return improvedTemplate;

  } catch (error) {
    console.error('‚ùå Erro na melhoria baseada em valida√ß√£o:', error);
    return template; // Retorna template original se falhar
  }
}

/**
 * Valida e melhora template gerado com uma segunda passada do GPT-4
 */
async function validateAndImproveTemplate(
  template: LearningAnalysis,
  disciplineName: string,
  userProfile?: any
): Promise<LearningAnalysis> {
  console.log('üîç Validando e melhorando template com GPT-4...');

  const totalTopics = template.modules.reduce((acc, m) => acc + (m.topics?.length || 0), 0);

  const validationPrompt = `Voc√™ √© um especialista em design curricular. Analise esta estrutura de curso e sugira melhorias.

DISCIPLINA: "${disciplineName}"
PERFIL DO ALUNO:
- N√≠vel: ${userProfile?.level || 'intermediate'}
- Objetivo: ${userProfile?.objective || 'Aprender de forma completa'}
- Objetivos espec√≠ficos: ${userProfile?.specificObjectives?.join(', ') || 'Dom√≠nio completo'}

ESTRUTURA ATUAL:
${JSON.stringify(template, null, 2)}

AN√ÅLISE NECESS√ÅRIA:
1. Esta estrutura est√° COMPLETA para ensinar ${disciplineName}?
2. Existem t√≥picos importantes FALTANDO?
3. A progress√£o pedag√≥gica est√° correta?
4. Os m√≥dulos cobrem teoria E pr√°tica?
5. H√° exerc√≠cios e prepara√ß√£o para avalia√ß√µes?

CRIT√âRIOS DE QUALIDADE:
- M√≠nimo de 50-70 t√≥picos no total (atual: ${totalTopics})
- Progress√£o do b√°sico ao avan√ßado
- Equil√≠brio entre teoria e pr√°tica
- Inclus√£o de exerc√≠cios e projetos
- Especificidade nos t√≥picos (n√£o gen√©ricos)

Se a estrutura precisar de melhorias, retorne a estrutura MELHORADA e EXPANDIDA.
Se estiver adequada, retorne a mesma estrutura com uma flag "validated": true.

IMPORTANTE:
- Se faltar conte√∫do, ADICIONE mais m√≥dulos e t√≥picos
- Se tiver menos de 50 t√≥picos, EXPANDA significativamente
- Mantenha o formato JSON id√™ntico ao original
- Adicione campo "validationNotes" com suas observa√ß√µes

Responda APENAS com JSON v√°lido.`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-2024-11-20",
      messages: [
        {
          role: 'system',
          content: 'Voc√™ √© um especialista em valida√ß√£o curricular. Analise e melhore curr√≠culos acad√™micos. Responda APENAS com JSON v√°lido.'
        },
        {
          role: 'user',
          content: validationPrompt
        }
      ],
      max_tokens: 4000,
      temperature: 0.2,
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) {
      console.log('‚ö†Ô∏è Sem resposta de valida√ß√£o, mantendo template original');
      return template;
    }

    const cleanContent = sanitizeJsonFromOpenAI(content);
    const validatedTemplate = JSON.parse(cleanContent) as LearningAnalysis & { validationNotes?: string };

    // Garantir estrutura de compatibilidade
    if (!validatedTemplate.topics && validatedTemplate.modules) {
      validatedTemplate.topics = validatedTemplate.modules.flatMap(module =>
        module.topics?.map(topic => ({
          title: topic.title,
          description: topic.description,
          keywords: topic.keyTerms || topic.searchKeywords || [],
          order: topic.order
        })) || []
      );
    }

    const newTotalTopics = validatedTemplate.modules.reduce((acc, m) => acc + (m.topics?.length || 0), 0);
    console.log(`‚úÖ Template validado e melhorado: ${validatedTemplate.modules.length} m√≥dulos, ${newTotalTopics} t√≥picos`);

    if (validatedTemplate.validationNotes) {
      console.log(`üìù Notas de valida√ß√£o: ${validatedTemplate.validationNotes}`);
    }

    return validatedTemplate;

  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o, mantendo template original:', error);
    return template;
  }
}

/**
 * Gera descri√ß√£o detalhada do que um aluno deve aprender em um t√≥pico espec√≠fico
 */
export async function generateTopicDescription(
  topicTitle: string, 
  subject: string, 
  level: string
): Promise<{
  description: string;
  learningObjectives: string[];
  keyTerms: string[];
  searchKeywords: string[];
}> {
  const prompt = `Como especialista em educa√ß√£o, crie uma descri√ß√£o detalhada para o t√≥pico "${topicTitle}" no contexto de um curso de "${subject}" (n√≠vel ${level}).

Responda no formato JSON:
{
  "description": "Descri√ß√£o detalhada do que este t√≥pico aborda (2-3 par√°grafos explicativos)",
  "learningObjectives": ["O que o aluno deve saber fazer ap√≥s estudar este t√≥pico", "Objetivo 2", "..."],
  "keyTerms": ["Termos e conceitos fundamentais", "Conceito 2", "..."],
  "searchKeywords": ["Palavras-chave para buscar v√≠deos educacionais relevantes", "Keyword 2", "..."]
}

Seja espec√≠fico, did√°tico e focado no aprendizado pr√°tico.`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: 'system',
          content: 'Voc√™ √© um especialista em educa√ß√£o que cria descri√ß√µes detalhadas de t√≥picos de aprendizado. Responda APENAS com JSON v√°lido.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: 800,
      temperature: 0.3,
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }
    
    // Extrair JSON da resposta
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('Resposta n√£o cont√©m JSON v√°lido');
    }

    const topicInfo = JSON.parse(jsonMatch[0]);
    
    return {
      description: topicInfo.description || `Estudo sobre ${topicTitle}`,
      learningObjectives: topicInfo.learningObjectives || [],
      keyTerms: topicInfo.keyTerms || [],
      searchKeywords: topicInfo.searchKeywords || [topicTitle]
    };
  } catch (error) {
    console.error('Erro ao gerar descri√ß√£o do t√≥pico:', error);
    
    // Fallback b√°sico
    return {
      description: `Estudo sobre ${topicTitle} no contexto de ${subject}`,
      learningObjectives: [`Entender os conceitos fundamentais de ${topicTitle}`],
      keyTerms: [topicTitle],
      searchKeywords: [topicTitle, subject]
    };
  }
}

export async function analyzeLearningGoal(userMessage: string, level?: string, uploadedFiles?: any[], userProfile?: any): Promise<LearningAnalysis> {
  console.log('üöÄ Gerando estrutura completa com IA para:', userMessage);

  try {
    // Importar processador de t√≥picos
    const { processTopicsIntoCourse } = await import('./topic-processor');

    // Usar a mensagem original como assunto
    const subject = userMessage;

    // STEP 1: Buscar t√≥picos acad√™micos recomendados com Perplexity
    console.log('üìö Buscando t√≥picos acad√™micos recomendados...');
    let academicTopics: string[] = [];
    let ragContext: string[] = [];
    let ragSources: string[] = [];

    try {
      // STEP 1A: Gerar prompt otimizado para Perplexity usando GPT
      const optimizedPrompt = await generatePerplexityPrompt(subject);
      console.log('üìù Prompt Perplexity otimizado gerado');

      const { searchRequiredTopics } = await import('./perplexity');
      academicTopics = await searchRequiredTopics(subject, level || 'intermediate', optimizedPrompt);
      console.log('‚úÖ T√≥picos acad√™micos encontrados:', academicTopics.length);
    } catch (perplexityError) {
      console.warn('‚ö†Ô∏è Erro na busca de t√≥picos acad√™micos:', perplexityError);
    }

    // STEP 2: Construir contexto RAG se h√° arquivos enviados
    if (uploadedFiles && uploadedFiles.length > 0) {
      console.log('üìÅ Construindo contexto RAG com arquivos enviados...');
      try {
        const { buildRAGContextForTopic } = await import('./rag');
        const ragResult = await buildRAGContextForTopic({
          topic: subject,
          level: (level as 'beginner' | 'intermediate' | 'advanced') || 'intermediate',
          maxWords: 1000
        }, uploadedFiles);

        ragContext = ragResult.ragContext;
        ragSources = ragResult.sources;
        console.log('‚úÖ Contexto RAG constru√≠do:', ragResult.totalSnippets, 'snippets');
      } catch (ragError) {
        console.warn('‚ö†Ô∏è Erro na constru√ß√£o do contexto RAG:', ragError);
      }
    }

    // DECIS√ÉO: Se temos muitos t√≥picos do Perplexity, usar processamento direto
    let dynamicTemplate: LearningAnalysis;

    // Usar threshold configur\u00e1vel (padr\u00e3o: 30)
    const TOPIC_THRESHOLD = parseInt(process.env.TOPIC_PROCESSING_THRESHOLD || '30');

    if (academicTopics.length >= TOPIC_THRESHOLD) {
      // Caso 1: Muitos t√≥picos - processar diretamente sem depender do GPT
      console.log(`\nüéØ PROCESSAMENTO DIRETO ATIVADO`);
      console.log(`üìä Estat√≠sticas iniciais:`);
      console.log(`  - T√≥picos do Perplexity: ${academicTopics.length}`);
      console.log(`  - Primeiros 3 t√≥picos:`);
      academicTopics.slice(0, 3).forEach((t, i) => {
        console.log(`    ${i+1}. ${t.substring(0, 80)}${t.length > 80 ? '...' : ''}`);
      });

      const processed = processTopicsIntoCourse(academicTopics, 15);

      console.log(`\nüìä RESULTADO DO PROCESSAMENTO:`);
      console.log(`  - T√≥picos originais: ${processed.stats.originalCount}`);
      console.log(`  - Ap√≥s deduplica√ß√£o: ${processed.stats.deduplicatedCount}`);
      console.log(`  - M√≥dulos criados: ${processed.stats.modulesCreated}`);
      console.log(`  - Total t√≥picos final: ${processed.totalTopics}`);

      console.log(`\nüìö ESTRUTURA DOS M√ìDULOS:`);
      processed.modules.forEach((mod, i) => {
        console.log(`  M√≥dulo ${i+1}: "${mod.title}" - ${mod.topics.length} t√≥picos`);
      });

      dynamicTemplate = {
        courseTitle: `Curso Completo de ${subject}`,
        subject,
        level: (level || 'intermediate') as 'beginner' | 'intermediate' | 'advanced',
        modules: processed.modules,
        topics: [],
        totalEstimatedHours: processed.modules.reduce((sum: number, mod: any) => {
          const hours = parseInt(mod.estimatedDuration) || 0;
          return sum + hours;
        }, 0),
        searchQueries: []
      };

      console.log(`\n‚úÖ PIPELINE DIRETO: ${processed.totalTopics} t√≥picos preservados em ${processed.modules.length} m√≥dulos`);
    } else {
      // Caso 2: Poucos t√≥picos - usar GPT para gerar estrutura
      console.log(`\nü§ñ GERA√á√ÉO GPT TRADICIONAL`);
      console.log(`  - T√≥picos do Perplexity: ${academicTopics.length}`);
      console.log(`  - Motivo: menos de 30 t√≥picos encontrados`);

      dynamicTemplate = await generateUniversalDynamicTemplate(
        subject,
        userMessage,
        level || 'intermediate',
        userProfile,
        {}, // Contexto adicional vazio
        academicTopics, // T√≥picos encontrados na web
        ragContext // Contexto dos arquivos
      );

      console.log(`\nüìä RESULTADO GPT:`);
      console.log(`  - M√≥dulos gerados: ${dynamicTemplate.modules?.length || 0}`);
      const gptTopicCount = dynamicTemplate.modules?.reduce((sum, m) => sum + (m.topics?.length || 0), 0) || 0;
      console.log(`  - Total de t√≥picos: ${gptTopicCount}`);

      if (academicTopics.length > 0 && gptTopicCount < academicTopics.length) {
        console.warn(`  ‚ö†Ô∏è Redu√ß√£o detectada: ${academicTopics.length} ‚Üí ${gptTopicCount} t√≥picos`);
      }
    }

    // STEP 3: Aplicar valida√ß√£o pedag√≥gica avan√ßada com auto-melhoria
    console.log('üîç Aplicando valida√ß√£o pedag√≥gica avan√ßada...');
    let finalTemplate = dynamicTemplate;
    let improvedCount = 0;
    const maxImprovements = 2;

    try {
      const { validateSyllabus } = await import('./syllabus-validation');

      // Converter para formato esperado pela valida√ß√£o
      const syllabusData = {
        title: dynamicTemplate.courseTitle,
        description: `Curso completo de ${subject} (n√≠vel ${level})`,
        level: level || 'intermediate',
        modules: dynamicTemplate.modules.map(module => ({
          id: `module-${module.order}`,
          title: module.title,
          description: module.description,
          order: module.order,
          estimatedDuration: module.estimatedDuration,
          topics: module.topics.map(topic => ({
            id: `topic-${module.order}-${topic.order}`,
            title: topic.title,
            description: topic.description,
            order: topic.order,
            estimatedDuration: topic.estimatedDuration
          }))
        })),
        totalDuration: `${dynamicTemplate.totalEstimatedHours}h`,
        pedagogicalMetadata: {
          academicTopics: academicTopics,
          ragSources: ragSources
        }
      };

      // Executar valida√ß√£o completa
      const validationReport = await validateSyllabus(
        syllabusData,
        userMessage,
        userProfile,
        ragContext.length > 0 ? [{ confidence_score: 0.8, authority_score: 0.7 }] : undefined
      );

      console.log('üìä Resultado da valida√ß√£o:', {
        score: validationReport.overallScore,
        passed: validationReport.passed,
        criticalFailures: validationReport.criticalFailures.length,
        needsReview: validationReport.needsHumanReview
      });

      // Auto-melhoria se score baixo
      while (validationReport.overallScore < 7.0 && improvedCount < maxImprovements) {
        console.log(`üîÑ Score baixo (${validationReport.overallScore}), aplicando melhorias autom√°ticas...`);

        finalTemplate = await improveTemplateBasedOnValidation(
          finalTemplate,
          validationReport,
          academicTopics,
          ragContext
        );

        improvedCount++;
      }

      console.log(`‚úÖ Valida√ß√£o conclu√≠da: Score ${validationReport.overallScore}/10, Melhorias: ${improvedCount}`);

    } catch (validationError) {
      console.warn('‚ö†Ô∏è Erro na valida√ß√£o avan√ßada, usando valida√ß√£o simples:', validationError);

      // Fallback para valida√ß√£o simples
      finalTemplate = await validateAndImproveTemplate(
        dynamicTemplate,
        subject,
        userProfile
      );
    }

    console.log(`‚úÖ Estrutura din√¢mica gerada e validada: ${finalTemplate.modules.length} m√≥dulos, ${finalTemplate.topics?.length} t√≥picos`);

    // STEP FINAL: Valida√ß√£o e melhoria final da estrutura antes de enviar ao usu√°rio
    console.log('üîç Executando valida√ß√£o final da estrutura do curso...');
    const finalValidation = await validateAndImproveFinalStructure(finalTemplate, subject);

    if (finalValidation.changesApplied.length > 0) {
      console.log(`üîÑ Melhorias aplicadas: ${finalValidation.changesApplied.length} mudan√ßas`);
      finalValidation.changesApplied.forEach(change => console.log(`   - ${change}`));
    }

    console.log(`üìä Score final de qualidade: ${finalValidation.validationScore}/10`);

    // Garantir padr√µes m√≠nimos de qualidade
    const qualityAssuredStructure = await ensureMinimumQualityStandards(
      finalValidation.improvedStructure,
      subject
    );

    // DEBUG FINAL: Rastrear conte\u00fado completo
    const finalTopicCount = qualityAssuredStructure.modules?.reduce((sum: number, m: any) => sum + (m.topics?.length || 0), 0) || 0;
    console.log(`\n\ud83c\udfaf RESULTADO FINAL DA AN\u00c1LISE:`);
    console.log(`  - T\u00edtulo: ${qualityAssuredStructure.courseTitle}`);
    console.log(`  - M\u00f3dulos: ${qualityAssuredStructure.modules?.length || 0}`);
    console.log(`  - Total de t\u00f3picos: ${finalTopicCount}`);
    console.log(`  - Distribui\u00e7\u00e3o: [${qualityAssuredStructure.modules?.map((m: any) => m.topics?.length || 0).join(', ') || 'vazio'}]`);

    return qualityAssuredStructure;
  } catch (error) {
    console.error('‚ùå Erro ao gerar estrutura din√¢mica, tentando m√©todo simplificado:', error);
    // Continua com m√©todo simplificado se falhar
  }

  // Criar contextInfo vazio para fallback
  const contextInfo: {
    isUniversityDiscipline?: boolean;
    discipline?: string;
    userContext?: {
      mentionsExam?: boolean;
      mentionsProject?: boolean;
    };
  } = {};

  // SEMPRE usar estrutura expandida para QUALQUER solicita√ß√£o de aprendizado
  const structureHints = contextInfo.isUniversityDiscipline && contextInfo.discipline
    ? getExpandedStructureHints(contextInfo.discipline as any)
    : { suggestedModules: 8, suggestedTopicsPerModule: 7, includeExercises: true, includeLab: true };

  // SEMPRE gerar estruturas robustas com muitos m√≥dulos e t√≥picos
  const moduleRange = `${Math.max(8, structureHints?.suggestedModules || 8)} a ${Math.max(12, (structureHints?.suggestedModules || 8) + 4)}`;

  const topicsPerModuleRange = `${Math.max(6, structureHints?.suggestedTopicsPerModule || 6)} a ${Math.max(10, (structureHints?.suggestedTopicsPerModule || 6) + 4)}`;

  const prompt = `
    üöÄ REQUISITO ESSENCIAL: Criar estrutura COMPLETA e EXTENSA como a de "C√°lculo Num√©rico" (63+ t√≥picos)

    IMPORTANTE: PRESERVE EXATAMENTE os termos espec√≠ficos que o usu√°rio utilizou.
    N√ÉO generalize nem modifique a terminologia original.

    ${contextInfo.isUniversityDiscipline ? 'üéì DETECTADO: DISCIPLINA UNIVERSIT√ÅRIA - Criar estrutura COMPLETA e DETALHADA' : 'üìö Criar estrutura COMPLETA e PROFUNDA para qualquer tema de aprendizado'}
    ${contextInfo.userContext?.mentionsExam ? 'üìù CONTEXTO: Usu√°rio mencionou PROVA - incluir m√≥dulo de exerc√≠cios e prepara√ß√£o' : ''}
    ${contextInfo.userContext?.mentionsProject ? 'üíª CONTEXTO: Usu√°rio mencionou PROJETO - incluir m√≥dulo pr√°tico/laborat√≥rio' : ''}

    Analise a seguinte mensagem do usu√°rio e crie uma estrutura hier√°rquica EXTENSA de aprendizado:

    REGRAS DE PRESERVA√á√ÉO DE TERMINOLOGIA:
    - Se o usu√°rio disse "constru√ß√£o mec√¢nica", mantenha EXATAMENTE "constru√ß√£o mec√¢nica"
    - Se o usu√°rio disse "matem√°tica", mantenha EXATAMENTE "matem√°tica"
    - N√ÉO generalize "constru√ß√£o mec√¢nica" para "materiais para engenharia"
    - N√ÉO modifique termos t√©cnicos espec√≠ficos do usu√°rio

    NOVA ESTRUTURA HIER√ÅRQUICA:
    - CURSO (T√≠tulo usando EXATAMENTE os termos do usu√°rio)
    - M√ìDULOS (focados especificamente no que o usu√°rio pediu) - ${moduleRange} m√≥dulos idealmente
    - T√ìPICOS (sub-t√≥picos espec√≠ficos dentro de cada m√≥dulo) - ${topicsPerModuleRange} t√≥picos por m√≥dulo

    IMPORTANTE: Cada T√ìPICO ter√° exatamente:
    - 3 v√≠deos do YouTube (ser√£o buscados automaticamente)
    - 1 aula-texto detalhada (ser√° gerada automaticamente)

    ${structureHints?.includeExercises ? 'üìù INCLUIR M√ìDULO OBRIGAT√ìRIO: "Exerc√≠cios e Prepara√ß√£o para Provas" com listas de exerc√≠cios, provas resolvidas e revis√£o' : ''}
    ${structureHints?.includeLab ? 'üíª INCLUIR M√ìDULO OBRIGAT√ìRIO: "Laborat√≥rio Computacional" com implementa√ß√µes pr√°ticas em Python/MATLAB' : ''}
    ${contextInfo.userContext?.mentionsExam ? 'üìä INCLUIR SE√á√ÉO: "Simulados e Provas Anteriores" com quest√µes tipo prova' : ''}

    CRIE uma sequ√™ncia pedag√≥gica l√≥gica onde:
    - M√≥dulos seguem ordem de dificuldade crescente
    - T√≥picos dentro do m√≥dulo seguem sequ√™ncia l√≥gica
    - Cada t√≥pico √© espec√≠fico e focado (ideal para 1 aula)
    - TUDO focado especificamente no que o usu√°rio pediu
    ${contextInfo.isUniversityDiscipline ? '- Profundidade universit√°ria com teoria, pr√°tica e aplica√ß√µes' : ''}

    Mensagem ORIGINAL do usu√°rio (mantenha a terminologia): "${userMessage}"
    ${level ? `N√≠vel especificado: ${level}` : ''}

    Responda APENAS com um JSON v√°lido no seguinte formato:
    {
      "courseTitle": "Curso sobre [EXATAMENTE o que o usu√°rio pediu] (ex: 'Constru√ß√£o Mec√¢nica', n√£o 'Materiais para Engenharia')",
      "subject": "mant√©m os termos exatos do usu√°rio",
      "level": "beginner|intermediate|advanced",
      "modules": [
        {
          "title": "Nome do M√≥dulo (ex: Fun√ß√µes)",
          "description": "Descri√ß√£o clara do que ser√° aprendido neste m√≥dulo",
          "order": 1,
          "estimatedDuration": "1-2 semanas",
          "learningObjectives": ["objetivo1", "objetivo2"],
          "topics": [
            {
              "title": "T√≥pico Espec√≠fico (ex: Fun√ß√£o do 1¬∫ Grau)",
              "description": "Descri√ß√£o do que ser√° aprendido",
              "detailedDescription": "Descri√ß√£o detalhada dos conceitos, habilidades e conhecimentos",
              "learningObjectives": ["objetivo espec√≠fico 1", "objetivo 2"],
              "keyTerms": ["termo1", "termo2", "termo3"],
              "searchKeywords": ["palavra para busca YouTube", "keyword2"],
              "difficulty": "easy|medium|hard",
              "order": 1,
              "estimatedDuration": "45 min"
            }
          ]
        }
      ],
      "totalEstimatedHours": 10,
      "searchQueries": ["query principal", "query secund√°ria"]
    }

    DIRETRIZES OBRIGAT√ìRIAS PARA ESTRUTURA COMPLETA:
    - M√çNIMO de ${moduleRange.split(' ')[0]} m√≥dulos principais (ideal: 10-12 m√≥dulos)
    - Cada m√≥dulo DEVE ter ${topicsPerModuleRange.split(' ')[0]} t√≥picos ou mais
    - META: 60-80 t√≥picos no total (como C√°lculo Num√©rico tem 63)
    - Use nomes em MAI√öSCULO para m√≥dulos (como "FUN√á√ïES", "LIMITES")
    - Cada t√≥pico deve ser ESPEC√çFICO (n√£o gen√©rico)
    - SEMPRE incluir m√≥dulo de "EXERC√çCIOS E PREPARA√á√ÉO PARA PROVAS"
    - SEMPRE incluir m√≥dulo de "LABORAT√ìRIO/PR√ÅTICA" quando aplic√°vel
    - Progress√£o do B√ÅSICO ao AVAN√áADO
    - Cada t√≥pico = 1 aula de 1-2 horas

    ESTRUTURA M√çNIMA OBRIGAT√ìRIA:
    1. Fundamentos e Introdu√ß√£o (6-8 t√≥picos)
    2. Conceitos B√°sicos (6-8 t√≥picos)
    3. Desenvolvimento Te√≥rico (6-8 t√≥picos)
    4. T√©cnicas e M√©todos (6-8 t√≥picos)
    5. Aplica√ß√µes Pr√°ticas (6-8 t√≥picos)
    6. T√≥picos Avan√ßados (6-8 t√≥picos)
    7. Projetos e Laborat√≥rio (5-7 t√≥picos)
    8. Exerc√≠cios e Prepara√ß√£o (5-7 t√≥picos)
    9. Revis√£o e Consolida√ß√£o (4-6 t√≥picos)
    + Mais m√≥dulos conforme necess√°rio para completude
  `;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.3,
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }

    const cleanContent = sanitizeJsonFromOpenAI(content);
    let analysis: LearningAnalysis;

    try {
      analysis = JSON.parse(cleanContent) as LearningAnalysis;
    } catch (parseError) {
      console.error('‚ùå Erro de parsing JSON:', parseError);
      console.log('üìÑ Conte√∫do que causou erro (primeiros 500 chars):', cleanContent.substring(0, 500));

      // Tentar corre√ß√£o autom√°tica com GPT-4
      try {
        console.log('üîÑ Tentando corre√ß√£o autom√°tica com GPT-4...');
        const correction = await openai.chat.completions.create({
          model: "gpt-4o-mini",
          messages: [
            {
              role: "system",
              content: "Corrija este JSON malformado e retorne APENAS o JSON v√°lido, sem explica√ß√µes:"
            },
            {
              role: "user",
              content: cleanContent.substring(0, 4000) // Limitar tamanho
            }
          ],
          max_tokens: 4000,
          temperature: 0
        });

        const correctedContent = correction.choices[0]?.message?.content;
        if (correctedContent) {
          const correctedClean = sanitizeJsonFromOpenAI(correctedContent);
          analysis = JSON.parse(correctedClean) as LearningAnalysis;
          console.log('‚úÖ JSON corrigido com sucesso pelo GPT-4');
        } else {
          throw new Error('Corre√ß√£o autom√°tica falhou');
        }
      } catch (correctionError) {
        console.error('‚ùå Corre√ß√£o autom√°tica falhou:', correctionError);
        throw new Error(`Falha ao processar JSON da OpenAI: ${parseError}`);
      }
    }

    // Garantir que a estrutura de compatibilidade existe
    // Nova estrutura: modules[].topics (sem sections)
    if (!analysis.topics && analysis.modules) {
      analysis.topics = analysis.modules.flatMap(module =>
        module.topics?.map(topic => ({
          title: topic.title,
          description: topic.description,
          keywords: topic.keyTerms || topic.searchKeywords || [], // Adaptar para nova estrutura
          order: topic.order
        })) || []
      );
    }

    // Garantir que courseTitle existe
    if (!analysis.courseTitle && analysis.subject) {
      analysis.courseTitle = analysis.subject;
    }

    // Garantir que totalEstimatedHours existe
    if (!analysis.totalEstimatedHours && analysis.modules) {
      analysis.totalEstimatedHours = Math.ceil(
        analysis.modules.reduce((acc, module) =>
          acc + (module.topics?.length || 0) * 0.75, 0
        )
      );
    }

    return analysis;
  } catch (error) {
    console.error('Erro ao analisar objetivo de aprendizado:', error);
    throw new Error('Falha ao processar sua solicita√ß√£o. Tente novamente.');
  }
}

export async function generateFollowUpQuestions(topic: string, level: string): Promise<string[]> {
  const prompt = `
    Gere 3 perguntas de acompanhamento para ajudar o usu√°rio a refinar seu aprendizado sobre "${topic}" no n√≠vel "${level}".
    
    Responda APENAS com um array JSON de strings:
    ["pergunta1", "pergunta2", "pergunta3"]
  `;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.5,
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) return [];

    return JSON.parse(content) as string[];
  } catch (error) {
    console.error('Erro ao gerar perguntas de acompanhamento:', error);
    return [];
  }
}

// ============================================================================
// FUN√á√ïES PARA AULA-TEXTO MELHORADA
// ============================================================================

/**
 * Sanitiza resposta JSON da OpenAI removendo cercas de c√≥digo e caracteres inv√°lidos
 */
function sanitizeJsonFromOpenAI(content: string): string {
  console.log('üîß Sanitizando JSON da OpenAI...');

  // Remove cercas de c√≥digo markdown mais agressivamente
  content = content.replace(/```json\s*/g, '').replace(/```\s*/g, '').replace(/^```/g, '').replace(/```$/g, '');

  // Remove caracteres de controle e BOM
  content = content.replace(/^\uFEFF/, '').replace(/[\u0000-\u0019\u007f-\u009f]/g, ' ');

  // Encontra o primeiro { e √∫ltimo } para extrair apenas o JSON
  const firstBrace = content.indexOf('{');
  const lastBrace = content.lastIndexOf('}');

  if (firstBrace === -1 || lastBrace === -1 || firstBrace >= lastBrace) {
    throw new Error('N√£o foi poss√≠vel encontrar JSON v√°lido na resposta');
  }

  content = content.substring(firstBrace, lastBrace + 1);

  // Remove v√≠rgulas penduradas antes de } ou ]
  content = content.replace(/,(\s*[}\]])/g, '$1');

  // Fix strings quebradas (substitui quebras de linha por espa√ßos em strings)
  content = content.replace(/"\s*\n\s*"/g, ' ');
  content = content.replace(/"\s*\n/g, '\\n"');
  content = content.replace(/\n\s*"/g, '"');

  // Normalizar espa√ßos em branco
  content = content.replace(/\s+/g, ' ');

  // Fix campos vazios que terminam com : seguido de } ou ]
  content = content.replace(/:\s*([}\]])/g, ': ""$1');

  console.log('‚úÖ JSON sanitizado com sucesso');
  // Extrai apenas o JSON se houver texto extra
  const jsonMatch = content.match(/\{[\s\S]*\}/);
  return jsonMatch ? jsonMatch[0] : content;
}

/**
 * Parser JSON robusto com retry autom√°tico
 */
async function parseJsonWithRetry(
  content: string,
  topic: string,
  maxRetries = 2
): Promise<AulaTextoStructure> {
  for (let attempt = 0; attempt <= maxRetries; attempt++) {
    try {
      const sanitized = sanitizeJsonFromOpenAI(content);
      const parsed = JSON.parse(sanitized);

      // Validar estrutura
      const validation = validateAulaTextoStructure(parsed);
      if (!validation.isValid) {
        throw new Error(`Estrutura inv√°lida: ${validation.errors.join(', ')}`);
      }

      return parsed as AulaTextoStructure;
    } catch (error) {
      console.log(`‚ùå Tentativa ${attempt + 1} falhou:`, error);

      if (attempt === maxRetries) {
        // √öltima tentativa: tentar corrigir com OpenAI
        console.log('üîÑ Tentando corrigir JSON com OpenAI...');

        try {
          const correction = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
              {
                role: "system",
                content: "Corrija este JSON para que seja v√°lido. Mantenha todo o conte√∫do, apenas corrija a sintaxe. Responda APENAS com o JSON corrigido."
              },
              {
                role: "user",
                content: `Corrija este JSON:\n${content.substring(0, 4000)}`
              }
            ],
            temperature: 0,
            max_tokens: 2000
          });

          const correctedContent = correction.choices[0]?.message?.content;
          if (correctedContent) {
            const correctedSanitized = sanitizeJsonFromOpenAI(correctedContent);
            return JSON.parse(correctedSanitized) as AulaTextoStructure;
          }
        } catch (correctionError) {
          console.error('‚ùå Falha na corre√ß√£o autom√°tica:', correctionError);
        }

        // Fallback final
        throw new Error(`Falha ao processar JSON ap√≥s ${maxRetries + 1} tentativas`);
      }
    }
  }

  throw new Error('Erro inesperado no parsing');
}

/**
 * Gera aula-texto seguindo princ√≠pios pedag√≥gicos cient√≠ficos
 */
export async function generateAulaTexto(config: AulaTextoConfig): Promise<{
  aulaTexto: AulaTextoStructure;
  tokensUsed: number;
  qualityScore?: number;
}> {
  console.log(`üéØ Gerando aula-texto RESPONDE A√ç para: "${config.topic}" (n√≠vel: ${config.level})`);

  // Detectar √°rea baseada no t√≥pico
  const detectArea = (topic: string): 'construcao_mecanica' | 'matematica' | 'fisica' | 'geral' => {
    const topicLower = topic.toLowerCase();
    if (topicLower.includes('material') || topicLower.includes('constru√ß') ||
        topicLower.includes('mec√¢n') || topicLower.includes('estrutur') ||
        topicLower.includes('a√ßo') || topicLower.includes('metal')) {
      return 'construcao_mecanica';
    }
    if (topicLower.includes('matem√°') || topicLower.includes('c√°lcul') ||
        topicLower.includes('equa√ß') || topicLower.includes('deriv')) {
      return 'matematica';
    }
    if (topicLower.includes('f√≠sic') || topicLower.includes('for√ßa') || topicLower.includes('energia')) {
      return 'fisica';
    }
    return 'geral';
  };

  const area = detectArea(config.topic);
  const context = config.ragContext?.join('\n') || '';

  const prompt = buildAulaTextoRespondAi({
    topic: config.topic,
    level: config.level,
    area,
    context
  });

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-2024-11-20",
      messages: [
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.3,
      max_tokens: 4000,
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }

    console.log('üìù Resposta recebida, processando JSON...');

    // Parse robusto com valida√ß√£o
    const aulaTexto = await parseJsonWithRetry(content, config.topic);

    // Adicionar metadados
    aulaTexto.metadata = {
      generatedAt: new Date().toISOString(),
      sources: config.ragContext ? ['RAG Context', 'OpenAI Knowledge'] : ['OpenAI Knowledge'],
      tokensUsed: completion.usage?.total_tokens || 0
    };

    console.log(`‚úÖ Aula-texto gerada com sucesso: ${aulaTexto.desenvolvimento.conceitos.length} conceitos`);

    return {
      aulaTexto,
      tokensUsed: completion.usage?.total_tokens || 0
    };
  } catch (error) {
    console.error('‚ùå Erro ao gerar aula-texto:', error);

    // Fallback com estrutura m√≠nima
    console.log('üîÑ Gerando conte√∫do de fallback...');

    const fallbackAulaTexto: AulaTextoStructure = {
      topic: config.topic,
      level: config.level,
      metadata: {
        generatedAt: new Date().toISOString(),
        sources: ['Fallback'],
        tokensUsed: 0
      },
      introducao: {
        objetivos: [`Compreender os conceitos fundamentais de ${config.topic}`],
        preRequisitos: ['Conhecimentos b√°sicos da √°rea'],
        tempoEstimado: '30-45 minutos',
        overview: `Esta aula apresenta uma introdu√ß√£o a ${config.topic}. Este √© um conte√∫do de fallback gerado automaticamente devido a problemas na gera√ß√£o din√¢mica.`
      },
      desenvolvimento: {
        conceitos: [{
          titulo: `Conceitos fundamentais de ${config.topic}`,
          definicao: `${config.topic} √© um t√≥pico importante na √°rea de estudo`,
          explicacao: 'Este √© um conte√∫do de fallback. O sistema n√£o conseguiu gerar a aula completa no momento.',
          exemplos: [{
            titulo: 'Exemplo b√°sico',
            descricao: 'Exemplo n√£o dispon√≠vel no momento',
            solucao: 'Solu√ß√£o n√£o dispon√≠vel no momento'
          }],
          analogias: ['Analogia n√£o dispon√≠vel no momento']
        }]
      },
      conclusao: {
        resumoExecutivo: `Resumo do t√≥pico ${config.topic}. Este conte√∫do de fallback foi gerado automaticamente.`,
        pontosChave: [`Conceitos b√°sicos de ${config.topic}`],
        conexoesFuturas: ['T√≥picos relacionados para estudo futuro']
      },
      verificacao: {
        perguntasReflexao: ['Quest√£o de reflex√£o n√£o dispon√≠vel no momento'],
        exercicios: [{
          pergunta: 'Exerc√≠cio n√£o dispon√≠vel no momento',
          dificuldade: 'medio' as const,
          gabarito: 'Resposta n√£o dispon√≠vel no momento',
          explicacao: 'Explica√ß√£o n√£o dispon√≠vel no momento'
        }],
        autoavaliacao: ['Auto-avalia√ß√£o n√£o dispon√≠vel no momento']
      },
      referencias: []
    };

    return {
      aulaTexto: fallbackAulaTexto,
      tokensUsed: 0,
      qualityScore: 3.0 // Score baixo para fallback
    };
  }
}

/**
 * Avalia qualidade da aula-texto usando rubrica cient√≠fica
 */
export async function evaluateAulaTextoQuality(
  aulaTexto: AulaTextoStructure,
  ragContext?: RAGContext[]
): Promise<AulaTextoQualityAssessment> {
  console.log('üìä Avaliando qualidade da aula-texto...');

  // Preparar contexto para verifica√ß√£o factual
  const contextInfo = ragContext
    ? `\n\nCONTEXTO PARA VERIFICA√á√ÉO FACTUAL:\n${ragContext.map(c => c.content.substring(0, 500)).join('\n---\n')}`
    : '';

  const evaluationPrompt = `${SYSTEM_PROMPT_AVALIACAO}

AULA-TEXTO PARA AVALIA√á√ÉO:
${JSON.stringify(aulaTexto, null, 2)}${contextInfo}

Avalie seguindo a rubrica especificada e retorne um JSON v√°lido com o formato exato especificado.`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-2024-11-20",
      messages: [
        {
          role: "user",
          content: evaluationPrompt
        }
      ],
      temperature: 0.1,
      max_tokens: 1500,
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }

    const sanitized = sanitizeJsonFromOpenAI(content);
    const assessment = JSON.parse(sanitized) as AulaTextoQualityAssessment;

    console.log(`‚úÖ Avalia√ß√£o conclu√≠da: Score ${assessment.score}/10`);

    return assessment;
  } catch (error) {
    console.error('‚ùå Erro ao avaliar qualidade:', error);

    // Fallback com checklist b√°sico
    const basicChecklist = QUALITY_CHECKLIST.map(item => ({
      item: item.item,
      ok: item.check(aulaTexto),
      comentario: item.check(aulaTexto) ? 'Presente' : 'Ausente'
    }));

    const basicScore = basicChecklist.filter(item => item.ok).length / basicChecklist.length * 10;

    return {
      score: Math.round(basicScore * 100) / 100,
      detalhamento: {
        clareza: { pontos: 7, comentario: 'Avalia√ß√£o b√°sica' },
        completude: { pontos: 7, comentario: 'Avalia√ß√£o b√°sica' },
        precisao: { pontos: 7, comentario: 'Avalia√ß√£o b√°sica' },
        exemplos: { pontos: 7, comentario: 'Avalia√ß√£o b√°sica' },
        exercicios: { pontos: 7, comentario: 'Avalia√ß√£o b√°sica' },
        adequacao: { pontos: 7, comentario: 'Avalia√ß√£o b√°sica' }
      },
      checklist: basicChecklist.map(item => ({
        ...item,
        ok: Boolean(item.ok)
      })),
      feedback: ['Avalia√ß√£o autom√°tica n√£o dispon√≠vel'],
      needsRewrite: basicScore < 8,
      strengths: ['Conte√∫do gerado'],
      improvementAreas: ['Avalia√ß√£o detalhada necess√°ria']
    };
  }
}

/**
 * Melhora aula-texto baseada em feedback de qualidade
 */
export async function improveAulaTexto(
  aulaTexto: AulaTextoStructure,
  assessment: AulaTextoQualityAssessment
): Promise<AulaTextoStructure> {
  if (!assessment.needsRewrite) {
    console.log('‚úÖ Aula-texto j√° tem qualidade satisfat√≥ria, n√£o precisa melhoria');
    return aulaTexto;
  }

  console.log('üîß Melhorando aula-texto baseada no feedback...');

  const improvementPrompt = SYSTEM_PROMPT_MELHORIA.replace(
    '{feedback_areas}',
    assessment.improvementAreas.join(', ')
  );

  const fullPrompt = `${improvementPrompt}

TEXTO ORIGINAL:
${JSON.stringify(aulaTexto, null, 2)}

FEEDBACK ESPEC√çFICO:
${assessment.feedback.join('\n- ')}

Retorne o JSON da aula-texto melhorada, mantendo a estrutura original mas aplicando as melhorias sugeridas.`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-2024-11-20",
      messages: [
        {
          role: "user",
          content: fullPrompt
        }
      ],
      temperature: 0.2,
      max_tokens: 4000,
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }

    const improvedAulaTexto = await parseJsonWithRetry(content, aulaTexto.topic);

    // Atualizar metadados
    improvedAulaTexto.metadata = {
      ...aulaTexto.metadata,
      qualityScore: assessment.score,
      generatedAt: new Date().toISOString()
    };

    console.log('‚úÖ Aula-texto melhorada com sucesso');

    return improvedAulaTexto;
  } catch (error) {
    console.error('‚ùå Erro ao melhorar aula-texto:', error);

    // Retornar original se melhoria falhar
    return aulaTexto;
  }
}

/**
 * Pipeline completo: gera + avalia + melhora se necess√°rio
 */
export async function generateHighQualityAulaTexto(
  config: AulaTextoConfig,
  ragContext?: RAGContext[]
): Promise<{
  aulaTexto: AulaTextoStructure;
  assessment: AulaTextoQualityAssessment;
  tokensUsed: number;
  improved: boolean;
}> {
  console.log('üöÄ Iniciando pipeline de gera√ß√£o de aula-texto de alta qualidade...');

  // 1. Gerar aula-texto inicial
  const { aulaTexto: initialAulaTexto, tokensUsed: initialTokens } = await generateAulaTexto(config);

  // 2. Avaliar qualidade
  const assessment = await evaluateAulaTextoQuality(initialAulaTexto, ragContext);

  let finalAulaTexto = initialAulaTexto;
  let improved = false;
  let totalTokens = initialTokens;

  // 3. Melhorar se necess√°rio
  if (assessment.needsRewrite && assessment.score < 8) {
    console.log(`üìà Score ${assessment.score}/10 baixo, iniciando melhoria...`);

    try {
      finalAulaTexto = await improveAulaTexto(initialAulaTexto, assessment);
      improved = true;

      // Re-avaliar ap√≥s melhoria
      const newAssessment = await evaluateAulaTextoQuality(finalAulaTexto, ragContext);
      console.log(`üìä Score ap√≥s melhoria: ${newAssessment.score}/10`);

      // Atualizar assessment com novo score
      assessment.score = newAssessment.score;
      assessment.needsRewrite = newAssessment.needsRewrite;

    } catch (error) {
      console.error('‚ö†Ô∏è Erro na melhoria, mantendo vers√£o original:', error);
    }
  }

  finalAulaTexto.metadata.qualityScore = assessment.score;

  console.log(`‚úÖ Pipeline conclu√≠do: Score final ${assessment.score}/10, Melhorado: ${improved}`);

  return {
    aulaTexto: finalAulaTexto,
    assessment,
    tokensUsed: totalTokens,
    improved
  };
}

/**
 * Gera lista de pr√©-requisitos para um curso
 */
export async function generatePrerequisites(
  courseTitle: string,
  courseDescription: string,
  level: 'beginner' | 'intermediate' | 'advanced',
  topics: string[]
): Promise<Prerequisite[]> {
  const prompt = `Como especialista em educa√ß√£o, analise o curso "${courseTitle}" (n√≠vel ${level}) e identifique os pr√©-requisitos essenciais.

DESCRI√á√ÉO DO CURSO: ${courseDescription}

T√ìPICOS DO CURSO:
${topics.map((topic, i) => `${i + 1}. ${topic}`).join('\n')}

Identifique pr√©-requisitos categorizados por import√¢ncia:
- ESSENCIAL: Conhecimento absolutamente necess√°rio para compreender o curso
- RECOMENDADO: Conhecimento que facilita significativamente o aprendizado
- OPCIONAL: Conhecimento que pode ser √∫til mas n√£o impede o progresso

Para cada pr√©-requisito, estime o tempo necess√°rio para dominar o conhecimento.

Responda APENAS com JSON v√°lido no formato:
{
  "prerequisites": [
    {
      "id": "prereq-1",
      "topic": "Nome do pr√©-requisito",
      "description": "Por que √© necess√°rio e como se relaciona com o curso",
      "importance": "essential|recommended|optional",
      "estimatedTime": "tempo estimado (ex: '2 horas', '1 semana')",
      "resources": [
        {
          "type": "course|video|article|book",
          "title": "Nome do recurso",
          "description": "Breve descri√ß√£o do que cobre"
        }
      ]
    }
  ]
}

IMPORTANTE: Retorne apenas o JSON, sem explica√ß√µes adicionais.`;

  try {
    console.log(`üîç Gerando pr√©-requisitos para: "${courseTitle}"`);

    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        { role: 'system', content: 'Voc√™ √© um especialista em design curricular e pr√©-requisitos educacionais. Responda sempre com JSON v√°lido.' },
        { role: 'user', content: prompt }
      ],
      max_tokens: 1500,
      temperature: 0.3,
    });

    const content = response.choices[0]?.message?.content;
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }

    // Parse JSON da resposta
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('N√£o foi poss√≠vel encontrar JSON na resposta');
    }

    const data = JSON.parse(jsonMatch[0]);

    if (!data.prerequisites || !Array.isArray(data.prerequisites)) {
      throw new Error('Formato de resposta inv√°lido');
    }

    console.log(`‚úÖ ${data.prerequisites.length} pr√©-requisitos identificados`);

    return data.prerequisites;

  } catch (error) {
    console.error('‚ùå Erro ao gerar pr√©-requisitos:', error);

    // Fallback com pr√©-requisitos b√°sicos baseados no n√≠vel
    const fallbackPrerequisites: Prerequisite[] = [];

    if (level === 'intermediate' || level === 'advanced') {
      fallbackPrerequisites.push({
        id: 'basic-math',
        topic: 'Matem√°tica B√°sica',
        description: 'Conhecimentos fundamentais de √°lgebra e aritm√©tica necess√°rios para acompanhar o curso.',
        importance: 'essential',
        estimatedTime: '1-2 semanas',
        resources: [{
          type: 'course',
          title: 'Revis√£o de Matem√°tica B√°sica',
          description: 'Curso de nivelamento em matem√°tica fundamental'
        }]
      });
    }

    if (level === 'advanced') {
      fallbackPrerequisites.push({
        id: 'intermediate-concepts',
        topic: 'Conceitos Intermedi√°rios',
        description: 'Dom√≠nio dos conceitos de n√≠vel intermedi√°rio da √°rea de estudo.',
        importance: 'essential',
        estimatedTime: '2-4 semanas',
        resources: [{
          type: 'course',
          title: 'Curso Intermedi√°rio da √Årea',
          description: 'Prepara√ß√£o para conceitos avan√ßados'
        }]
      });
    }

    return fallbackPrerequisites;
  }
}

/**
 * Detecta dificuldades do aluno e sugere cursos de apoio
 */
export async function detectLearningDifficulties(
  chatHistory: string[],
  currentTopic: string,
  courseTitle: string
): Promise<{
  hasProblems: boolean;
  missingKnowledge: string[];
  suggestedSupportCourses: SupportCourse[];
  recommendation: string;
}> {
  const prompt = `Analise as d√∫vidas do aluno para detectar se h√° dificuldades com pr√©-requisitos.

CURSO: "${courseTitle}"
T√ìPICO ATUAL: "${currentTopic}"

HIST√ìRICO DE D√öVIDAS:
${chatHistory.map((msg, i) => `${i + 1}. ${msg}`).join('\n')}

Com base nas perguntas, identifique:
1. Se o aluno tem dificuldades com conhecimentos b√°sicos necess√°rios
2. Quais conhecimentos espec√≠ficos est√£o faltando
3. Se seria √∫til fazer um curso de apoio antes de continuar

Responda APENAS com JSON:
{
  "hasProblems": boolean,
  "missingKnowledge": ["conhecimento 1", "conhecimento 2"],
  "recommendation": "texto explicando a situa√ß√£o e recomenda√ß√£o",
  "suggestedCourses": [
    {
      "id": "support-1",
      "title": "T√≠tulo do curso de apoio",
      "description": "Para que serve e como ajuda",
      "prerequisiteFor": "t√≥pico atual",
      "topics": ["t√≥pico 1", "t√≥pico 2"],
      "estimatedDuration": "tempo estimado",
      "difficulty": "beginner|intermediate"
    }
  ]
}`;

  try {
    console.log(`üîç Analisando dificuldades para: "${currentTopic}"`);

    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        { role: 'system', content: 'Voc√™ √© um especialista em detectar lacunas de conhecimento em estudantes. Responda sempre com JSON v√°lido.' },
        { role: 'user', content: prompt }
      ],
      max_tokens: 1000,
      temperature: 0.3,
    });

    const content = response.choices[0]?.message?.content;
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }

    // Parse JSON da resposta
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('N√£o foi poss√≠vel encontrar JSON na resposta');
    }

    const data = JSON.parse(jsonMatch[0]);

    console.log(`‚úÖ An√°lise de dificuldades conclu√≠da: ${data.hasProblems ? 'Problemas detectados' : 'Sem problemas'}`);

    return {
      hasProblems: data.hasProblems || false,
      missingKnowledge: data.missingKnowledge || [],
      suggestedSupportCourses: data.suggestedCourses || [],
      recommendation: data.recommendation || 'Continue com o curso atual.'
    };

  } catch (error) {
    console.error('‚ùå Erro ao detectar dificuldades:', error);

    return {
      hasProblems: false,
      missingKnowledge: [],
      suggestedSupportCourses: [],
      recommendation: 'Continue estudando. Se tiver d√∫vidas, use o chat para pedir ajuda.'
    };
  }
}

/**
 * Gera syllabus estruturado baseado na mensagem do usu√°rio
 */
export async function generateCourseSyllabus(
  message: string,
  userProfile?: any,
  uploadedFiles?: any[],
  bookData?: any[]
): Promise<SyllabusData> {
  console.log('üéØ Iniciando gera√ß√£o de syllabus com sistema pedag√≥gico avan√ßado...');

  // Importar sistemas pedag√≥gicos
  const { analyzePedagogicalStructure } = await import('./pedagogicalEngine');
  const { buildSpecializedPrompt, validateSyllabusQuality } = await import('./prompts/pedagogicalPrompts');
  const {
    analyzeUserProfile,
    generatePersonalizationRecommendations,
    applyPersonalizationToPrompt
  } = await import('./personalizationEngine');

  try {
    // 1. Processar dados de livros se dispon√≠veis
    let bookContext = '';
    let bookMetadata: any = {};
    if (bookData && bookData.length > 0) {
      console.log('üìö Processando dados de livros para integra√ß√£o...');
      const bookIntegration = await processBookDataForSyllabus(bookData, message, userProfile);
      bookContext = bookIntegration.context;
      bookMetadata = bookIntegration.metadata;
      console.log('‚úÖ Dados de livros integrados:', {
        booksProcessed: bookData.length,
        chaptersFound: bookIntegration.metadata.totalChapters,
        exercisesFound: bookIntegration.metadata.totalExercises,
        contextLength: bookContext.length
      });
    }

    // 2. An√°lise pedag√≥gica do dom√≠nio
    const pedagogicalAnalysis = analyzePedagogicalStructure(message, userProfile);
    console.log('üìä An√°lise pedag√≥gica:', {
      domain: pedagogicalAnalysis.domain.name,
      complexity: pedagogicalAnalysis.complexity,
      approach: pedagogicalAnalysis.recommendedApproach,
      bloomLevels: pedagogicalAnalysis.bloomProgression
    });

    // 3. An√°lise detalhada do perfil do usu√°rio
    const detailedProfile = analyzeUserProfile(userProfile || {});
    console.log('üë§ Perfil detalhado:', {
      learningStyle: detailedProfile.learningStyle,
      timePerSession: detailedProfile.constraints.timePerSession,
      motivation: detailedProfile.learningGoals.motivation
    });

    // 4. RAG: Recupera√ß√£o de evid√™ncias antes da gera√ß√£o
    let ragEvidences: { approved: any[], needsReview: any[] } = { approved: [], needsReview: [] };
    try {
      console.log('üîç Iniciando recupera√ß√£o de evid√™ncias (RAG)...');
      ragEvidences = await retrieveEvidencesForSyllabus(message, uploadedFiles);
      console.log('üìä Evid√™ncias coletadas:', {
        total: ragEvidences.approved.length + ragEvidences.needsReview.length,
        approved: ragEvidences.approved.length,
        needsReview: ragEvidences.needsReview.length,
        sources: [...new Set(ragEvidences.approved.map((e: any) => e.source))]
      });
    } catch (error) {
      console.warn('‚ö†Ô∏è RAG n√£o dispon√≠vel, continuando sem evid√™ncias:', error);
      ragEvidences = { approved: [], needsReview: [] };
    }

    // 5. Gera√ß√£o de recomenda√ß√µes de personaliza√ß√£o
    const personalizationRecs = generatePersonalizationRecommendations(detailedProfile, pedagogicalAnalysis);

    // 6. Constru√ß√£o do prompt especializado
    const specializedPrompt = buildSpecializedPrompt(pedagogicalAnalysis, message, userProfile);

    // 7. Aplica√ß√£o da personaliza√ß√£o ao prompt
    let finalPrompt = applyPersonalizationToPrompt(specializedPrompt, detailedProfile, personalizationRecs);

    // 8. Integra√ß√£o do contexto de livros no prompt
    if (bookContext) {
      finalPrompt = integrateBookContextIntoPrompt(finalPrompt, bookContext, bookMetadata);
    }

    console.log('üîß Prompt pedag√≥gico constru√≠do com sucesso');

    // 9. Gera√ß√£o do syllabus via OpenAI
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-2024-11-20",
      messages: [
        {
          role: 'system',
          content: `Voc√™ √© um especialista pedag√≥gico em design curricular que usa metodologias cient√≠ficas de ensino.
          Sua expertise inclui Taxonomia de Bloom, an√°lise de dom√≠nios de conhecimento e personaliza√ß√£o educacional.
          Responda APENAS com JSON v√°lido seguindo rigorosamente as especifica√ß√µes pedag√≥gicas fornecidas.`
        },
        {
          role: 'user',
          content: finalPrompt
        }
      ],
      max_tokens: 3000, // Aumentado para acomodar prompts mais detalhados
      temperature: 0.2, // Mais conservador para consist√™ncia pedag√≥gica
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }

    // Parse JSON da resposta
    console.log('üìù Resposta bruta da OpenAI:', content.substring(0, 200) + '...');

    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('N√£o foi poss√≠vel encontrar JSON na resposta');
    }

    let syllabusData = JSON.parse(jsonMatch[0]);

    console.log('‚ú® Dados parseados antes do mapeamento:', {
      title: syllabusData.title,
      curso: !!syllabusData.curso,
      hasModules: !!syllabusData.modules,
      modulesType: Array.isArray(syllabusData.modules) ? 'array' : typeof syllabusData.modules,
      modulesLength: syllabusData.modules?.length
    });

    // Mapear estrutura se estiver em portugu√™s
    if (syllabusData.curso && !syllabusData.title) {
      console.log('üîÑ Mapeando estrutura de portugu√™s para ingl√™s');
      syllabusData = {
        title: syllabusData.curso.titulo || syllabusData.curso.title,
        description: syllabusData.curso.descricao || syllabusData.curso.description,
        level: syllabusData.curso.nivel || syllabusData.curso.level || 'beginner',
        modules: syllabusData.curso.modulos || syllabusData.curso.modules || []
      };

      // Mapear m√≥dulos se necess√°rio
      if (syllabusData.modules && Array.isArray(syllabusData.modules)) {
        syllabusData.modules = syllabusData.modules.map((module: any, index: number) => ({
          id: module.id || `module-${index + 1}`,
          title: module.titulo || module.title,
          description: module.descricao || module.description || '',
          order: module.ordem || module.order || index + 1,
          estimatedDuration: module.duracaoEstimada || module.estimatedDuration || '2 horas',
          topics: (module.topicos || module.topics || []).map((topic: any, topicIndex: number) => ({
            id: topic.id || `topic-${topicIndex + 1}`,
            title: topic.titulo || topic.title,
            description: topic.descricao || topic.description || '',
            order: topic.ordem || topic.order || topicIndex + 1,
            estimatedDuration: topic.duracaoEstimada || topic.estimatedDuration || '30 min',
            subtopics: topic.subtopicos || topic.subtopics || []
          }))
        }));
      }

      console.log('‚úÖ Estrutura mapeada:', {
        title: syllabusData.title,
        modulesCount: syllabusData.modules?.length
      });
    }

    // 7. Valida√ß√£o pedag√≥gica b√°sica
    const validationResult = validateSyllabusQuality(syllabusData, pedagogicalAnalysis);
    console.log('üìã Valida√ß√£o pedag√≥gica b√°sica:', {
      score: validationResult.score,
      isValid: validationResult.isValid,
      feedbackCount: validationResult.feedback.length
    });

    // 7.5. Valida√ß√£o p√≥s-gera√ß√£o completa
    console.log('üîç Executando valida√ß√£o p√≥s-gera√ß√£o completa...');
    const { validateSyllabus } = await import('./syllabus-validation');
    const fullValidationReport = await validateSyllabus(
      syllabusData,
      message,
      userProfile,
      ragEvidences.approved
    );

    console.log('üìä Relat√≥rio de valida√ß√£o completa:', {
      overallScore: fullValidationReport.overallScore,
      passed: fullValidationReport.passed,
      criticalFailures: fullValidationReport.criticalFailures.length,
      needsHumanReview: fullValidationReport.needsHumanReview
    });

    // 8. Melhorias baseadas na valida√ß√£o (se necess√°rio)
    if (!validationResult.isValid && validationResult.score < 7) {
      console.log('‚ö†Ô∏è Syllabus n√£o passou na valida√ß√£o, aplicando melhorias...');

      // Adicionar metadados de qualidade
      syllabusData.pedagogicalMetadata = {
        domainAnalysis: pedagogicalAnalysis,
        validationScore: validationResult.score,
        personalizations: personalizationRecs.contentAdaptations,
        improvements: validationResult.improvements,
        bloomProgression: pedagogicalAnalysis.bloomProgression,
        ragMetadata: {
          evidencesUsed: ragEvidences.approved.length,
          evidencesNeedingReview: ragEvidences.needsReview.length,
          sources: [...new Set(ragEvidences.approved.map((e: any) => e.source))],
          avgConfidenceScore: ragEvidences.approved.length > 0 ?
            ragEvidences.approved.reduce((sum: number, e: any) => sum + e.confidence_score, 0) / ragEvidences.approved.length : 0
        },
        bookMetadata: bookData ? {
          booksUsed: bookData.length,
          totalChapters: bookMetadata.totalChapters || 0,
          totalExercises: bookMetadata.totalExercises || 0,
          totalFormulas: bookMetadata.totalFormulas || 0,
          pedagogicalAlignment: bookMetadata.pedagogicalAlignment || 'medium',
          bookTitles: bookData.map(book => book.bookInfo?.title || 'Unknown').slice(0, 3)
        } : null,
        fullValidationReport
      };
    }

    // Validar estrutura m√≠nima
    if (!syllabusData.title || !syllabusData.modules || !Array.isArray(syllabusData.modules)) {
      throw new Error('Estrutura de syllabus inv√°lida');
    }

    console.log('‚úÖ Syllabus pedag√≥gico gerado:', {
      title: syllabusData.title,
      modules: syllabusData.modules.length,
      topics: syllabusData.modules.reduce((sum: number, m: any) => sum + (m.topics?.length || 0), 0),
      domain: pedagogicalAnalysis.domain.name,
      bloomLevels: pedagogicalAnalysis.bloomProgression.length,
      validationScore: validationResult.score,
      ragEvidences: ragEvidences.approved.length,
      avgConfidenceScore: syllabusData.pedagogicalMetadata?.ragMetadata?.avgConfidenceScore || 0
    });

    // Log relat√≥rio de evid√™ncias para debug
    if (ragEvidences.approved.length > 0) {
      console.log('üìã Relat√≥rio de evid√™ncias:\n', generateScoringReport(ragEvidences.approved.slice(0, 5)));
    }

    // 9. Flagging para revis√£o humana
    if (ragEvidences.needsReview.length > 0) {
      console.log(`‚ö†Ô∏è ${ragEvidences.needsReview.length} evid√™ncias precisam de revis√£o humana`);
      syllabusData.humanReviewFlags = {
        lowConfidenceEvidences: ragEvidences.needsReview.map((e: any) => ({
          source: e.source,
          confidence: e.confidence_score,
          content: e.content.substring(0, 100) + '...'
        })),
        recommendedActions: [
          'Revisar evid√™ncias com baixa confian√ßa',
          'Validar fontes acad√™micas',
          'Verificar precis√£o do conte√∫do'
        ]
      };
    }

    return syllabusData;

  } catch (error) {
    console.error('‚ùå Erro ao gerar syllabus pedag√≥gico:', error);

    // Fallback: usar sistema pedag√≥gico para gerar estrutura b√°sica
    try {
      const { analyzePedagogicalStructure, generateTopicStructure } = await import('./pedagogicalEngine');

      const pedagogicalAnalysis = analyzePedagogicalStructure(message, userProfile);
      const topic = message.substring(0, 50);

      console.log('üîÑ Gerando fallback pedag√≥gico...');

      // Gerar estrutura baseada na an√°lise pedag√≥gica
      const modules = [];
      const moduleCount = pedagogicalAnalysis.complexity === 'high' ? 6 :
                         pedagogicalAnalysis.complexity === 'medium' ? 4 : 3;

      for (let i = 0; i < moduleCount; i++) {
        const moduleTitle = `M√≥dulo ${i + 1}`;
        const topicStructure = generateTopicStructure(pedagogicalAnalysis, moduleTitle, i + 1);

        modules.push({
          id: `module-${i + 1}`,
          title: moduleTitle,
          description: `${moduleTitle} do curso`,
          order: i + 1,
          estimatedDuration: `${Math.round(pedagogicalAnalysis.estimatedDuration.total / moduleCount)} horas`,
          topics: topicStructure.map(topic => ({
            id: topic.id,
            title: topic.title,
            description: `T√≥pico sobre ${topic.title}`,
            order: topic.bloomLevel,
            estimatedDuration: `${Math.round(60 / topicStructure.length)} min`,
            subtopics: topic.subtopics.map(sub => sub.title)
          }))
        });
      }

      return {
        title: `Curso de ${topic}`,
        description: `Curso estruturado sobre ${topic} baseado em metodologias pedag√≥gicas`,
        level: userProfile?.level || 'intermediate',
        modules,
        totalDuration: `${pedagogicalAnalysis.estimatedDuration.total} horas`,
        pedagogicalMetadata: {
          domainAnalysis: pedagogicalAnalysis,
          validationScore: 6.0, // Score b√°sico para fallback
          isFallback: true,
          bloomProgression: pedagogicalAnalysis.bloomProgression
        }
      };

    } catch (fallbackError) {
      console.error('‚ùå Erro no fallback pedag√≥gico:', fallbackError);

      // Fallback final: estrutura m√≠nima
      const topic = message.substring(0, 50);
      return {
        title: `Curso de ${topic}`,
        description: `Curso b√°sico sobre ${topic}`,
        level: userProfile?.level || 'intermediate',
        modules: [
          {
            id: 'module-1',
            title: 'Fundamentos',
            description: 'Conceitos b√°sicos e introdu√ß√£o',
            order: 1,
            estimatedDuration: '2 horas',
            topics: [
              {
                id: 'topic-1-1',
                title: 'Introdu√ß√£o',
                description: 'Vis√£o geral do assunto',
                order: 1,
                estimatedDuration: '30 min',
                subtopics: ['Defini√ß√µes', 'Import√¢ncia', 'Aplica√ß√µes']
              }
            ]
          }
        ],
        totalDuration: '3-4 horas'
      };
    }
  }
}

/**
 * Recupera evid√™ncias acad√©micas para fundamentar a gera√ß√£o do syllabus
 */
async function retrieveEvidencesForSyllabus(
  message: string,
  uploadedFiles?: any[]
): Promise<{ approved: any[], needsReview: any[] }> {
  const { chunkDocument, chunkMultipleDocuments } = await import('./chunking');
  const {
    scoreEvidence,
    rerankEvidences,
    flagEvidencesForHumanReview,
    combineEvidencesFromSources
  } = await import('./evidence-scoring');
  const { searchAcademicContent } = await import('./perplexity');
  const { cacheEvidences, generateEvidenceKey } = await import('./cache');

  const allEvidences: any[] = [];

  try {
    // 1. Processar documentos enviados (com cache)
    if (uploadedFiles && uploadedFiles.length > 0) {
      console.log('üìÑ Processando documentos enviados...');

      const { cacheDocumentChunks } = await import('./cache');

      const documents = uploadedFiles.map(file => ({
        content: file.content || '',
        filename: file.name || 'unknown',
        source: `documento_${file.name}`
      }));

      // Cache chunks por documento individualmente para melhor granularidade
      const allChunks: any[] = [];
      for (const doc of documents) {
        const chunks = await cacheDocumentChunks(
          doc.filename,
          doc.content,
          () => chunkDocument(doc.content, doc.source, {
            maxTokens: 500,
            overlapTokens: 50
          }, doc.filename),
          24 * 60 * 60 * 1000 // 1 dia TTL (docs mudam mais)
        );
        allChunks.push(...chunks);
      }

      // Converter chunks para evid√™ncias
      for (const chunk of allChunks.slice(0, 20)) { // Limite de 20 chunks por performance
        const evidence = scoreEvidence({
          content: chunk.content,
          source: chunk.metadata.source,
          type: 'documento',
          metadata: {
            filename: chunk.metadata.filename,
            chunk_index: chunk.metadata.chunkIndex,
            word_count: chunk.content.split(' ').length
          }
        }, message, message);

        allEvidences.push(evidence);
      }
    }

    // 2. Buscar evid√™ncias no Perplexity (com cache)
    console.log('üîç Buscando evid√™ncias acad√©micas no Perplexity...');

    try {
      const perplexityKey = generateEvidenceKey(message, {
        source: 'perplexity',
        maxResults: 15,
        language: 'pt'
      });

      const perplexityResponse = await cacheEvidences(
        perplexityKey,
        () => searchAcademicContent({
          query: message,
          language: 'pt',
          maxResults: 15,
          siteFilters: ['site:.edu', 'site:edu.br', 'site:scholar.google.com', 'filetype:pdf']
        }),
        7 * 24 * 60 * 60 * 1000 // 7 dias TTL
      );

      // Processar resposta do Perplexity
      if (perplexityResponse.answer) {
        const sentences = perplexityResponse.answer.split(/[.!?]+/)
          .filter(s => s.trim().length > 50);

        for (let i = 0; i < sentences.length; i += 2) {
          const content = sentences.slice(i, i + 3).join('. ').trim();

          if (content.length > 100) {
            const evidence = scoreEvidence({
              content,
              source: 'perplexity',
              type: 'academic_paper',
              url: 'https://perplexity.ai',
              metadata: {
                word_count: content.split(' ').length
              }
            }, message, message);

            allEvidences.push(evidence);
          }
        }
      }

      // Processar cita√ß√µes
      for (const citation of perplexityResponse.citations || []) {
        if (citation.snippet && citation.snippet.length > 50) {
          const evidence = scoreEvidence({
            content: citation.snippet,
            source: 'perplexity',
            type: 'academic_paper',
            url: citation.url,
            title: citation.title,
            metadata: {
              word_count: citation.snippet.split(' ').length
            }
          }, message, message);

          allEvidences.push(evidence);
        }
      }
    } catch (perplexityError) {
      console.warn('‚ö†Ô∏è Erro ao buscar no Perplexity:', perplexityError);
    }

    // 3. Reordenar e filtrar evid√™ncias
    const rankedEvidences = rerankEvidences(allEvidences, {
      authority_weight: 0.4,
      similarity_weight: 0.35,
      recency_weight: 0.15,
      license_weight: 0.1,
      min_confidence_threshold: 0.6,
      max_evidences_per_topic: 15,
      language_preference: 'both'
    });

    // 4. Separar evid√™ncias aprovadas vs. que precisam de revis√£o
    const { approved, needsReview } = flagEvidencesForHumanReview(rankedEvidences);

    console.log(`‚úÖ Evid√™ncias processadas: ${approved.length} aprovadas, ${needsReview.length} para revis√£o`);

    // Log cache statistics
    const { ragCache, generateCacheReport } = await import('./cache');
    const cacheStats = ragCache.getStats();
    console.log(`üíæ Cache stats: ${cacheStats.entries} entradas, ${(ragCache.getHitRate() * 100).toFixed(1)}% hit rate`);

    return { approved, needsReview };

  } catch (error) {
    console.error('‚ùå Erro ao recuperar evid√™ncias:', error);
    return { approved: [], needsReview: [] };
  }
}

/**
 * Formata evid√™ncias para inclus√£o no prompt
 */
function formatEvidencesForPrompt(evidences: any[]): string {
  return evidences.slice(0, 10).map((evidence, index) => {
    const sourceLabel = evidence.type === 'documento' ? 'Documento' :
                       evidence.type === 'academic_paper' ? 'Paper Acad√™mico' :
                       evidence.type === 'university' ? 'Universidade' : 'Fonte Educacional';

    const confidenceLabel = evidence.confidence_score >= 0.8 ? 'Alta' :
                           evidence.confidence_score >= 0.6 ? 'M√©dia' : 'Baixa';

    return `[Evid√™ncia ${index + 1}] (${sourceLabel} - Confian√ßa: ${confidenceLabel})
Fonte: ${evidence.url || evidence.source}
Conte√∫do: ${evidence.content.substring(0, 300)}${evidence.content.length > 300 ? '...' : ''}
Score de Autoridade: ${evidence.authority_score.toFixed(2)}
Score de Similaridade: ${evidence.similarity_score.toFixed(2)}
---`;
  }).join('\n\n');
}

/**
 * Adiciona metadados de evid√™ncias aos m√≥dulos do syllabus
 */
function addEvidenceMetadataToSyllabus(syllabusData: any, evidences: any[]): any {
  if (!syllabusData.modules || !Array.isArray(syllabusData.modules)) {
    return syllabusData;
  }

  // Distribuir evid√™ncias entre os m√≥dulos baseado em relev√¢ncia
  const evidencesByModule = distributeEvidencesToModules(syllabusData.modules, evidences);

  syllabusData.modules = syllabusData.modules.map((module: any, index: number) => {
    const moduleEvidences = evidencesByModule[index] || [];

    return {
      ...module,
      evidence: moduleEvidences.map(e => ({
        source: e.source,
        type: e.type,
        confidence_score: e.confidence_score,
        authority_score: e.authority_score,
        url: e.url,
        title: e.title,
        content_preview: e.content.substring(0, 100) + '...'
      }))
    };
  });

  return syllabusData;
}

/**
 * Distribui evid√™ncias entre m√≥dulos baseado em relev√¢ncia de t√≥picos
 */
function distributeEvidencesToModules(modules: any[], evidences: any[]): any[][] {
  const evidencesByModule: any[][] = modules.map(() => []);

  for (const evidence of evidences) {
    let bestMatch = 0;
    let bestScore = 0;

    // Encontrar m√≥dulo mais relevante para esta evid√™ncia
    for (let i = 0; i < modules.length; i++) {
      const module = modules[i];
      const moduleText = `${module.title} ${module.description || ''} ${module.topics?.map((t: any) => t.title).join(' ') || ''}`;

      const relevanceScore = calculateSimpleRelevance(evidence.content, moduleText);

      if (relevanceScore > bestScore) {
        bestScore = relevanceScore;
        bestMatch = i;
      }
    }

    // Adicionar evid√™ncia ao m√≥dulo mais relevante (m√°ximo 3 por m√≥dulo)
    if (evidencesByModule[bestMatch].length < 3) {
      evidencesByModule[bestMatch].push(evidence);
    }
  }

  return evidencesByModule;
}

/**
 * Calcula relev√¢ncia simples entre dois textos
 */
function calculateSimpleRelevance(text1: string, text2: string): number {
  const words1 = text1.toLowerCase().split(/\s+/).filter(w => w.length > 3);
  const words2 = text2.toLowerCase().split(/\s+/).filter(w => w.length > 3);

  let matches = 0;
  for (const word of words1) {
    if (words2.includes(word)) {
      matches++;
    }
  }

  return words1.length > 0 ? matches / words1.length : 0;
}

/**
 * Processa dados de livros para integra√ß√£o ao syllabus
 */
async function processBookDataForSyllabus(
  bookData: any[],
  message: string,
  userProfile?: any
): Promise<{
  context: string;
  metadata: any;
}> {
  console.log(`üìö Processando ${bookData.length} livros para integra√ß√£o ao syllabus...`);

  const allChapters: any[] = [];
  const allExercises: any[] = [];
  const allFormulas: any[] = [];
  const allExamples: any[] = [];
  let totalChapters = 0;
  let totalExercises = 0;
  let totalFormulas = 0;

  // Extrair dados estruturados de cada livro
  for (const book of bookData) {
    if (book.chapters) {
      allChapters.push(...book.chapters);
      totalChapters += book.chapters.length;
    }
    if (book.exercises) {
      allExercises.push(...book.exercises);
      totalExercises += book.exercises.length;
    }
    if (book.formulas) {
      allFormulas.push(...book.formulas);
      totalFormulas += book.formulas.length;
    }
    if (book.examples) {
      allExamples.push(...book.examples);
    }
  }

  // An√°lise pedag√≥gica dos livros
  const pedagogicalAlignment = await analyzePedagogicalAlignment(allChapters, message, userProfile);

  // Construir contexto estruturado
  const context = buildBookContext(allChapters, allExercises, allFormulas, allExamples, pedagogicalAlignment);

  const metadata = {
    totalChapters,
    totalExercises,
    totalFormulas,
    totalExamples: allExamples.length,
    pedagogicalAlignment: pedagogicalAlignment.overall,
    chapterAlignment: pedagogicalAlignment.chapters,
    recommendedSequence: pedagogicalAlignment.sequence
  };

  console.log(`‚úÖ Processamento conclu√≠do: ${totalChapters} cap√≠tulos, ${totalExercises} exerc√≠cios, ${totalFormulas} f√≥rmulas`);

  return { context, metadata };
}

/**
 * Analisa alinhamento pedag√≥gico dos cap√≠tulos dos livros com o curso desejado
 */
async function analyzePedagogicalAlignment(
  chapters: any[],
  message: string,
  userProfile?: any
): Promise<{
  overall: 'high' | 'medium' | 'low';
  chapters: Array<{ chapterTitle: string; relevance: number; reason: string }>;
  sequence: string[];
}> {
  const prompt = `Analise o alinhamento pedag√≥gico entre os cap√≠tulos de livros acad√™micos e o curso desejado pelo usu√°rio.

CURSO DESEJADO: "${message}"
N√çVEL DO USU√ÅRIO: ${userProfile?.level || 'intermediate'}

CAP√çTULOS DOS LIVROS:
${chapters.slice(0, 10).map((chapter, i) =>
  `${i + 1}. "${chapter.title}" - T√≥picos: ${chapter.keyTopics?.join(', ') || 'N/A'} - Dificuldade: ${chapter.difficulty || 'medium'}`
).join('\n')}

Analise:
1. Relev√¢ncia de cada cap√≠tulo para o curso (0-10)
2. Sequ√™ncia pedag√≥gica recomendada
3. Alinhamento geral

Responda APENAS com JSON:
{
  "overall": "high|medium|low",
  "chapters": [
    {
      "chapterTitle": "nome do cap√≠tulo",
      "relevance": 8.5,
      "reason": "por que √© relevante"
    }
  ],
  "sequence": ["cap√≠tulo 1", "cap√≠tulo 2", "..."]
}`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: 'system',
          content: 'Voc√™ √© um especialista em design curricular e an√°lise pedag√≥gica. Responda apenas com JSON v√°lido.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: 1000,
      temperature: 0.2,
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }

    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('JSON n√£o encontrado na resposta');
    }

    return JSON.parse(jsonMatch[0]);
  } catch (error) {
    console.error('‚ùå Erro ao analisar alinhamento pedag√≥gico:', error);

    // Fallback simples
    return {
      overall: 'medium',
      chapters: chapters.slice(0, 5).map(chapter => ({
        chapterTitle: chapter.title,
        relevance: 7.0,
        reason: 'An√°lise autom√°tica n√£o dispon√≠vel'
      })),
      sequence: chapters.slice(0, 5).map(chapter => chapter.title)
    };
  }
}

/**
 * Constr√≥i contexto estruturado dos livros para o prompt
 */
function buildBookContext(
  chapters: any[],
  exercises: any[],
  formulas: any[],
  examples: any[],
  alignment: any
): string {
  const relevantChapters = alignment.chapters
    .filter((ch: any) => ch.relevance >= 6.0)
    .slice(0, 8);

  const relevantExercises = exercises
    .filter(ex => relevantChapters.some((ch: any) =>
      ch.chapterTitle.toLowerCase().includes(ex.chapter?.toString() || '')))
    .slice(0, 15);

  const relevantFormulas = formulas.slice(0, 10);
  const relevantExamples = examples.slice(0, 8);

  return `
CONTEXTO DE LIVROS ACAD√äMICOS:

=== ESTRUTURA DE CAP√çTULOS RELEVANTES ===
${relevantChapters.map((ch: any, i: number) =>
  `${i + 1}. "${ch.chapterTitle}" (Relev√¢ncia: ${ch.relevance}/10)
   - Raz√£o: ${ch.reason}
   - T√≥picos-chave: ${chapters.find(c => c.title === ch.chapterTitle)?.keyTopics?.join(', ') || 'N/A'}`
).join('\n')}

=== SEQU√äNCIA PEDAG√ìGICA RECOMENDADA ===
${alignment.sequence.slice(0, 6).map((title: string, i: number) => `${i + 1}. ${title}`).join('\n')}

=== EXERC√çCIOS TIPO DOS LIVROS ===
${relevantExercises.slice(0, 8).map((ex: any, i: number) =>
  `${i + 1}. ${ex.type || 'Pr√°tico'} - ${ex.content?.substring(0, 100) || 'Exerc√≠cio n√£o especificado'}...`
).join('\n')}

=== F√ìRMULAS E CONCEITOS CHAVE ===
${relevantFormulas.map((formula: any, i: number) =>
  `${i + 1}. ${formula.name}: ${formula.expression || 'N/A'} - ${formula.description?.substring(0, 80) || 'Sem descri√ß√£o'}...`
).join('\n')}

=== EXEMPLOS RESOLVIDOS TIPO ===
${relevantExamples.map((ex: any, i: number) =>
  `${i + 1}. ${ex.title} - ${ex.problem?.substring(0, 100) || 'Problema n√£o especificado'}...`
).join('\n')}

ALINHAMENTO GERAL: ${alignment.overall.toUpperCase()}
`;
}

/**
 * Integra contexto de livros no prompt do syllabus
 */
function integrateBookContextIntoPrompt(
  basePrompt: string,
  bookContext: string,
  bookMetadata: any
): string {
  const bookIntegrationSection = `

=== INTEGRA√á√ÉO COM LIVROS ACAD√äMICOS ===
${bookContext}

INSTRU√á√ïES PARA USO DOS LIVROS:
1. Alinhe os m√≥dulos do syllabus com a estrutura de cap√≠tulos relevantes
2. Use a sequ√™ncia pedag√≥gica recomendada como base para ordena√ß√£o dos t√≥picos
3. Inclua refer√™ncias aos exerc√≠cios tipo encontrados nos livros
4. Adapte as f√≥rmulas e conceitos identificados aos t√≥picos correspondentes
5. Cite os livros nas refer√™ncias bibliogr√°ficas dos m√≥dulos relevantes

N√çVEL DE ALINHAMENTO: ${bookMetadata.pedagogicalAlignment || 'medium'}
TOTAL DE RECURSOS: ${bookMetadata.totalChapters} cap√≠tulos, ${bookMetadata.totalExercises} exerc√≠cios, ${bookMetadata.totalFormulas} f√≥rmulas
`;

  // Inserir o contexto de livros antes das instru√ß√µes finais do prompt
  const insertionPoint = basePrompt.lastIndexOf('Responda APENAS com JSON');
  if (insertionPoint === -1) {
    return basePrompt + bookIntegrationSection;
  }

  return basePrompt.substring(0, insertionPoint) + bookIntegrationSection + '\n\n' + basePrompt.substring(insertionPoint);
}

/**
 * Consulta OpenAI para obter recomenda√ß√µes de livros acad√™micos
 */
export async function getRecommendedTextbooks(
  subject: string,
  level: 'beginner' | 'intermediate' | 'advanced',
  language: string = 'pt'
): Promise<BookRecommendation[]> {
  try {
    console.log(`üìö Consultando OpenAI para livros de "${subject}" (n√≠vel ${level})`);

    const prompt = `Voc√™ √© um especialista em bibliografia acad√™mica universit√°ria.

TAREFA: Identifique os 3 principais livros-texto mais utilizados por professores universit√°rios para ensinar "${subject}" no n√≠vel ${level}.

CRIT√âRIOS:
1. Livros amplamente adotados em universidades reconhecidas
2. Autores autoridades na √°rea
3. Edi√ß√µes atualizadas e bem estabelecidas
4. Adequados para o n√≠vel ${level}
5. ${language === 'pt' ? 'Priorizar livros em portugu√™s quando poss√≠vel' : 'Preferir livros em ingl√™s'}

IMPORTANTE:
- Focar em livros-texto principais (n√£o livros complementares)
- Incluir ISBNs quando poss√≠vel
- Explicar por que cada livro √© recomendado
- Avaliar universalidade de uso

Responda APENAS com JSON v√°lido no formato:
{
  "recommendations": [
    {
      "title": "T√≠tulo completo do livro",
      "author": "Nome completo do(s) autor(es)",
      "isbn": "ISBN se conhecido",
      "year": 2023,
      "publisher": "Editora",
      "edition": "10¬™ edi√ß√£o",
      "category": "primary",
      "description": "Descri√ß√£o do livro e sua abordagem",
      "reasons": ["Raz√£o 1", "Raz√£o 2", "Raz√£o 3"],
      "relevanceScore": 95,
      "universallyUsed": true
    }
  ]
}`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.3,
      max_tokens: 2000
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) {
      console.error('‚ùå OpenAI n√£o retornou resposta para livros recomendados');
      return [];
    }

    console.log('üìù Resposta bruta da OpenAI:', content.substring(0, 200));

    const parsed = JSON.parse(content);
    const recommendations: BookRecommendation[] = parsed.recommendations || [];

    console.log(`‚úÖ OpenAI recomendou ${recommendations.length} livros para "${subject}"`);
    recommendations.forEach((book, index) => {
      console.log(`   ${index + 1}. ${book.title} - ${book.author} (score: ${book.relevanceScore})`);
    });

    return recommendations;

  } catch (error) {
    console.error('‚ùå Erro ao consultar OpenAI para livros recomendados:', error);
    return [];
  }
}
