import { PerplexityResponse, AcademicContent, AcademicReference, WorkedExample, GlossaryItem, ExerciseItem } from '@/types';
import OpenAI from 'openai';

// Cliente OpenAI para fallback
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * Sanitiza texto JSON removendo caracteres de controle e cercas de c√≥digo
 */
function sanitizeToJson(text: string): string {
  // Remove cercas de c√≥digo markdown
  text = text.replace(/```json\s*/g, '').replace(/```\s*/g, '');

  // Encontra o primeiro { e √∫ltimo } para extrair apenas o JSON
  const firstBrace = text.indexOf('{');
  const lastBrace = text.lastIndexOf('}');

  if (firstBrace === -1 || lastBrace === -1 || firstBrace >= lastBrace) {
    throw new Error('N√£o foi poss√≠vel encontrar JSON v√°lido na resposta');
  }

  text = text.substring(firstBrace, lastBrace + 1);

  // Remove caracteres de controle problem√°ticos
  text = text.replace(/[\u0000-\u0008\u000B-\u000C\u000E-\u001F\u007f-\u009f]/g, ' ');

  // Fix strings quebradas (substitui aspas n√£o fechadas por aspas duplas)
  text = text.replace(/"\s*\n\s*"/g, ' ');
  text = text.replace(/"\s*\n/g, '\\n"');
  text = text.replace(/\n\s*"/g, '"');

  // Remove v√≠rgulas penduradas antes de } ou ]
  text = text.replace(/,(\s*[}\]])/g, '$1');

  // Fix dois pontos seguidos de } ou ] (campos vazios)
  text = text.replace(/:\s*([}\]])/g, ': ""$1');

  return text.trim();
}

/**
 * Parser JSON seguro com sanitiza√ß√£o
 */
function safeJsonParse(raw: string): any {
  try {
    const clean = sanitizeToJson(raw);
    console.log('üîß JSON sanitizado:', clean.substring(0, 200) + '...');
    return JSON.parse(clean);
  } catch (e) {
    console.error('‚ùå Erro no parsing JSON:', e);
    console.error('üìÑ Texto original (primeiros 500 chars):', raw.substring(0, 500));
    throw new Error(`JSON parsing falhou: ${e instanceof Error ? e.message : 'Erro desconhecido'}`);
  }
}

/**
 * Fallback usando OpenAI para corrigir/regenerar JSON
 */
async function ensureStructuredJsonOrRegenerate(rawText: string, topic: string): Promise<any> {
  try { 
    return safeJsonParse(rawText); 
  } catch {
    console.log('üîÑ Tentando corrigir JSON com OpenAI...');
    
    if (!process.env.OPENAI_API_KEY) {
      console.error('‚ùå OpenAI API Key n√£o configurada para fallback');
      throw new Error('JSON inv√°lido e sem fallback OpenAI dispon√≠vel');
    }
    
    const fix = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: "Conserte para JSON v√°lido, sem explica√ß√µes, sem cercas. Mantenha o conte√∫do original." },
        { role: "user", content: `Conserte este conte√∫do para JSON v√°lido:\n${rawText.substring(0, 3000)}` }
      ],
      temperature: 0
    });
    
    return safeJsonParse(fix.choices[0]?.message?.content ?? '{}');
  }
}

const PERPLEXITY_API_BASE = 'https://api.perplexity.ai/chat/completions';

export interface PerplexitySearchParams {
  query: string;
  model?: string;
  language?: string;
}

export async function searchRequiredTopics(subject: string, level: string): Promise<string[]> {
  console.log('üîç Perplexity - Buscando t√≥picos necess√°rios para:', subject, 'n√≠vel:', level);

  const searchQuery = `Liste todos os t√≥picos fundamentais e necess√°rios para aprender "${subject}" desde o n√≠vel ${level === 'beginner' ? 'iniciante at√© avan√ßado' : level}. 
  Organize os t√≥picos em uma progress√£o l√≥gica de aprendizado, do mais b√°sico ao mais avan√ßado. 
  Responda APENAS com uma lista numerada dos t√≥picos, sem explica√ß√µes adicionais.
  Exemplo de formato:
  1. Conceitos b√°sicos
  2. Fundamentos te√≥ricos
  3. Aplica√ß√µes pr√°ticas
  ...`;

  try {
    console.log('üåê Fazendo requisi√ß√£o para buscar t√≥picos necess√°rios...');
    const response = await fetch(PERPLEXITY_API_BASE, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'sonar-pro',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um especialista em educa√ß√£o e planejamento curricular. Forne√ßa listas estruturadas de t√≥picos de aprendizado.'
          },
          {
            role: 'user',
            content: searchQuery
          }
        ],
        max_tokens: 1500,
        temperature: 0.3,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro na busca de t√≥picos:', errorText);
      throw new Error(`Perplexity API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    const content = data.choices[0].message.content;
    
    // Extrai os t√≥picos da resposta
    const topics = extractTopicsFromResponse(content);
    console.log('‚úÖ T√≥picos extra√≠dos:', topics);
    
    return topics;
  } catch (error) {
    console.error('Erro ao buscar t√≥picos necess√°rios no Perplexity:', error);
    throw new Error('Falha ao buscar t√≥picos necess√°rios. Tente novamente.');
  }
}

export async function searchAcademicContent(params: PerplexitySearchParams): Promise<PerplexityResponse> {
  const {
    query,
    model = 'sonar-pro',
    language = 'pt'
  } = params;

  console.log('üîç Perplexity - Iniciando busca para:', query);
  console.log('üîë API Key configurada:', !!process.env.PERPLEXITY_API_KEY);

  const searchQuery = language === 'pt' 
    ? `Pesquise conte√∫dos acad√™micos sobre "${query}" em portugu√™s e ingl√™s. Inclua artigos cient√≠ficos, papers, livros acad√™micos e materiais de universidades reconhecidas.`
    : `Search for academic content about "${query}". Include scientific articles, research papers, academic books, and materials from recognized universities.`;

  console.log('üìù Query preparada:', searchQuery);

  try {
    console.log('üåê Fazendo requisi√ß√£o para Perplexity...');
    const response = await fetch(PERPLEXITY_API_BASE, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY}`,
      },
      body: JSON.stringify({
        model,
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um assistente acad√™mico especializado. Forne√ßa informa√ß√µes precisas e bem fundamentadas com cita√ß√µes apropriadas.'
          },
          {
            role: 'user',
            content: searchQuery
          }
        ],
        max_tokens: 2000,
        temperature: 0.2,
      }),
    });

    console.log('üì° Status da resposta:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro na resposta do Perplexity:', errorText);
      throw new Error(`Perplexity API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('‚úÖ Dados recebidos do Perplexity:', data);
    
    // Extrai cita√ß√µes da resposta
    const citations = extractCitationsFromResponse(data.choices[0].message.content);
    
    return {
      answer: data.choices[0].message.content,
      citations
    };
  } catch (error) {
    console.error('Erro ao buscar conte√∫do acad√™mico no Perplexity:', error);
    throw new Error('Falha ao buscar conte√∫do acad√™mico. Tente novamente.');
  }
}

export async function generateAcademicSummary(
  topic: string, 
  perplexityResponse: PerplexityResponse
): Promise<AcademicContent> {
  const systemMessage = `Voc√™ √© um professor universit√°rio experiente. Explique como em aula, passo a passo, usando analogias, intui√ß√£o f√≠sica e rigor. Use LaTeX para f√≥rmulas com \\( ... \\) e \\[ ... \\]. Seja claro e did√°tico.`;
  
  const userPrompt = `
T√≥pico: "${topic}"
Conte√∫do de refer√™ncia: ${perplexityResponse.answer}

Gere **apenas** um JSON v√°lido UTF-8 (sem \`\`\`, sem coment√°rios), com o seguinte schema:

{
  "introduction": "2-4 par√°grafos: contexto, por que √© importante, quando usar",
  "lecture": "AULA COMPLETA: narrativa cont√≠nua, com deriva√ß√£o e exemplos intercalados; use \\\\( ... \\\\) e \\\\[ ... \\\\] para f√≥rmulas",
  "keyConcepts": ["itens curtos e objetivos"],
  "workedExamples": [
    {
      "title": "nome do exemplo",
      "statement": "enunciado",
      "solution": "passo a passo com LaTeX"
    }
  ],
  "practicalExamples": ["exemplo 1", "exemplo 2"],
  "commonMisunderstandings": ["erros frequentes", "armadilhas"],
  "exercises": [
    {"statement": "enunciado", "answer": "resposta final objetiva"}
  ],
  "glossary": [{"term":"", "definition":""}],
  "summary": "1-2 par√°grafos: o que lembrar"
}

Regras:
- Mantenha JSON v√°lido (sem quebras de linha ilegais, sem barras invertidas extras).
- Priorize rigor e did√°tica, mas seja conciso onde poss√≠vel.
- Para refer√™ncias, use apenas as do conte√∫do fornecido.
`;

  try {
    console.log('üéØ Gerando aula completa para:', topic);
    
    const response = await fetch(PERPLEXITY_API_BASE, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'sonar-pro',
        messages: [
          {
            role: 'system',
            content: systemMessage
          },
          {
            role: 'user',
            content: userPrompt
          }
        ],
        max_tokens: 4000, // Aumentado para aula completa
        temperature: 0.3,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Perplexity API error: ${response.status}`, errorText);
      throw new Error(`Perplexity API error: ${response.status}`);
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content;
    
    if (!content) {
      throw new Error('Resposta vazia do Perplexity');
    }
    
    console.log('üìÑ Resposta recebida, processando JSON...');
    
    // Usar parser robusto com fallback
    const summaryData = await ensureStructuredJsonOrRegenerate(content, topic);
    
    // Processa refer√™ncias das cita√ß√µes
    const references: AcademicReference[] = perplexityResponse.citations.map((citation, index) => {
      const authors = extractAuthorsFromTitle(citation.title);
      const year = extractYearFromUrl(citation.url) || new Date().getFullYear();
      
      return {
        title: citation.title,
        authors,
        year,
        url: citation.url,
        type: determineReferenceType(citation.url, citation.title),
      };
    });

    console.log('‚úÖ Conte√∫do acad√™mico estruturado gerado com sucesso');
    
    return {
      id: `academic-${Date.now()}`,
      topicId: `topic-${Date.now()}`,
      introduction: summaryData.introduction || 'Introdu√ß√£o n√£o dispon√≠vel',
      lecture: summaryData.lecture || 'Aula completa n√£o dispon√≠vel',
      keyConcepts: summaryData.keyConcepts || [],
      workedExamples: summaryData.workedExamples || [],
      practicalExamples: summaryData.practicalExamples || [],
      commonMisunderstandings: summaryData.commonMisunderstandings || [],
      exercises: summaryData.exercises || [],
      glossary: summaryData.glossary || [],
      references,
      summary: summaryData.summary || 'Resumo n√£o dispon√≠vel',
      created_at: new Date().toISOString(),
    };
  } catch (error) {
    console.error('‚ùå Erro ao gerar conte√∫do acad√™mico completo:', error);
    
    // Fallback com conte√∫do b√°sico quando tudo falha
    console.log('üîÑ Gerando conte√∫do de fallback...');
    
    return {
      id: `academic-fallback-${Date.now()}`,
      topicId: `topic-${Date.now()}`,
      introduction: `Introdu√ß√£o ao t√≥pico ${topic}. Este conte√∫do foi gerado automaticamente devido a problemas na gera√ß√£o din√¢mica.`,
      lecture: `Aula sobre ${topic}:\n\nEste √© um conte√∫do de fallback. O sistema n√£o conseguiu gerar a aula completa no momento.`,
      keyConcepts: [`Conceitos fundamentais de ${topic}`],
      workedExamples: [{
        title: `Exemplo de ${topic}`,
        statement: 'Exemplo n√£o dispon√≠vel no momento',
        solution: 'Solu√ß√£o n√£o dispon√≠vel no momento'
      }],
      practicalExamples: [`Exemplo pr√°tico de ${topic}`],
      commonMisunderstandings: [`Erros comuns em ${topic}`],
      exercises: [{
        statement: 'Exerc√≠cio n√£o dispon√≠vel no momento',
        answer: 'Resposta n√£o dispon√≠vel no momento'
      }],
      glossary: [{
        term: topic,
        definition: 'Defini√ß√£o n√£o dispon√≠vel no momento'
      }],
      references: [],
      summary: `Resumo do t√≥pico ${topic}. Este conte√∫do de fallback foi gerado automaticamente.`,
      created_at: new Date().toISOString(),
    };
  }
}

function extractCitationsFromResponse(content: string) {
  // Extrai URLs e t√≠tulos do conte√∫do da resposta
  const urlRegex = /https?:\/\/[^\s\)]+/g;
  const urls = content.match(urlRegex) || [];
  
  return urls.map((url, index) => ({
    title: `Refer√™ncia ${index + 1}`,
    url,
    snippet: extractSnippetAroundUrl(content, url)
  }));
}

function extractSnippetAroundUrl(content: string, url: string) {
  const urlIndex = content.indexOf(url);
  if (urlIndex === -1) return '';
  
  const start = Math.max(0, urlIndex - 100);
  const end = Math.min(content.length, urlIndex + url.length + 100);
  
  return content.substring(start, end).trim();
}

function extractAuthorsFromTitle(title: string): string[] {
  // Tenta extrair autores do t√≠tulo (heur√≠stica simples)
  const patterns = [
    /by\s+([^-]+)/i,
    /autor[es]*:\s*([^-\n]+)/i,
    /([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)\s+(?:et\s+al\.?|and\s+)/i
  ];
  
  for (const pattern of patterns) {
    const match = title.match(pattern);
    if (match) {
      return match[1].split(/,|\s+and\s+|\s+&\s+/).map(author => author.trim());
    }
  }
  
  return ['Autor n√£o identificado'];
}

function extractYearFromUrl(url: string): number | null {
  const yearMatch = url.match(/\/(\d{4})\//);
  if (yearMatch) {
    const year = parseInt(yearMatch[1]);
    if (year >= 1900 && year <= new Date().getFullYear()) {
      return year;
    }
  }
  return null;
}

function determineReferenceType(url: string, title: string): 'article' | 'paper' | 'book' | 'website' {
  const lowerUrl = url.toLowerCase();
  const lowerTitle = title.toLowerCase();
  
  if (lowerUrl.includes('doi.org') || lowerUrl.includes('pubmed') || lowerUrl.includes('arxiv')) {
    return 'paper';
  }
  
  if (lowerUrl.includes('scholar.google') || lowerTitle.includes('journal') || lowerTitle.includes('article')) {
    return 'article';
  }
  
  if (lowerTitle.includes('book') || lowerTitle.includes('livro')) {
    return 'book';
  }
  
  return 'website';
}

function extractTopicsFromResponse(content: string): string[] {
  // Remove quebras de linha extras e normaliza o texto
  const normalizedContent = content.trim();
  
  // Extrai linhas que come√ßam com n√∫mero seguido de ponto ou par√™nteses
  const topicRegex = /^\s*\d+[\.\)]\s*(.+)$/gm;
  const matches = normalizedContent.match(topicRegex);
  
  if (matches) {
    return matches.map(match => {
      // Remove o n√∫mero e limpa o texto
      const cleaned = match.replace(/^\s*\d+[\.\)]\s*/, '').trim();
      return cleaned;
    }).filter(topic => topic.length > 0);
  }
  
  // Fallback: divide por linhas e remove n√∫meros
  const lines = normalizedContent.split('\n');
  const topics = lines
    .map(line => line.replace(/^\s*[\d\-\*]\s*/, '').trim())
    .filter(line => line.length > 0 && !line.match(/^(resposta|exemplo|formato)/i));
  
  return topics.slice(0, 15); // Limita a 15 t√≥picos
}

export interface TopicValidationResult {
  suggestedTopics: string[];
  missingTopics: string[];
  additionalTopics: string[];
  validationSummary: string;
}

export async function validateTopicsWithPerplexity(
  userGoal: string,
  currentTopics: string[],
  level: string,
  assistantId?: string
): Promise<TopicValidationResult> {
  console.log('üîç Validando t√≥picos...');
  
  // Se temos um Assistant com arquivos, usar ele para valida√ß√£o mais inteligente
  if (assistantId) {
    console.log('ü§ñ Usando OpenAI Assistant para valida√ß√£o com base nos arquivos enviados');
    
    try {
      const { askAssistantWithFiles } = await import('@/lib/openai-files');
      
      const validationPrompt = `
Analise os t√≥picos planejados para o curso "${userGoal}" (n√≠vel ${level}) e valide contra o conte√∫do dos documentos que voc√™ tem acesso:

T√ìPICOS ATUALMENTE PLANEJADOS:
${currentTopics.map((topic, i) => `${i + 1}. ${topic}`).join('\n')}

Com base nos documentos enviados, responda no formato JSON:
{
  "missingTopics": ["t√≥picos importantes que deveriam estar inclu√≠dos mas n√£o est√£o na lista"],
  "additionalTopics": ["t√≥picos extras que complementariam o aprendizado baseado nos documentos"],
  "validationSummary": "An√°lise detalhada comparando os t√≥picos planejados com o conte√∫do dos documentos",
  "coverageAnalysis": "Avalia√ß√£o de quanto os documentos cobrem os t√≥picos planejados"
}

Foque em identificar lacunas e oportunidades com base no conte√∫do real dos documentos.`;

      const result = await askAssistantWithFiles(assistantId, validationPrompt);
      
      // Tentar extrair JSON da resposta
      const jsonMatch = result.content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const validationData = JSON.parse(jsonMatch[0]);
        
        console.log('‚úÖ Valida√ß√£o com arquivos conclu√≠da');
        return {
          suggestedTopics: currentTopics, // Usar t√≥picos atuais como base
          missingTopics: validationData.missingTopics || [],
          additionalTopics: validationData.additionalTopics || [],
          validationSummary: validationData.validationSummary || 'An√°lise baseada nos arquivos enviados conclu√≠da'
        };
      }
    } catch (error) {
      console.error('‚ùå Erro na valida√ß√£o com Assistant, voltando para Perplexity:', error);
    }
  }

  console.log('üîç Usando valida√ß√£o simplificada (Perplexity indispon√≠vel)...');
  
  // Fallback simples quando Perplexity n√£o est√° dispon√≠vel
  try {
    const perplexityTopics = await searchRequiredTopics(userGoal, level);
    
    const validationPrompt = `
Analise os t√≥picos sugeridos para aprender "${userGoal}" no n√≠vel ${level}:

T√ìPICOS ATUALMENTE IDENTIFICADOS:
${currentTopics.map((topic, i) => `${i + 1}. ${topic}`).join('\n')}

T√ìPICOS RECOMENDADOS PELO PERPLEXITY:
${perplexityTopics.map((topic, i) => `${i + 1}. ${topic}`).join('\n')}

Compare os dois conjuntos e responda no seguinte formato JSON:
{
  "missingTopics": ["t√≥picos importantes que est√£o faltando"],
  "additionalTopics": ["t√≥picos extras que poderiam ser √∫teis"],
  "validationSummary": "Resumo da an√°lise e recomenda√ß√µes"
}

Foque em identificar lacunas importantes no aprendizado.`;

    const response = await fetch(PERPLEXITY_API_BASE, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'sonar-pro',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um especialista em educa√ß√£o que compara curr√≠culos de aprendizado. Responda APENAS com JSON v√°lido.'
          },
          {
            role: 'user',
            content: validationPrompt
          }
        ],
        max_tokens: 1000,
        temperature: 0.2,
      }),
    });

    if (!response.ok) {
      throw new Error(`Perplexity API error: ${response.status}`);
    }

    const data = await response.json();
    const content = data.choices[0].message.content;
    
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('Resposta n√£o cont√©m JSON v√°lido');
    }

    const validationData = JSON.parse(jsonMatch[0]);
    
    return {
      suggestedTopics: perplexityTopics,
      missingTopics: validationData.missingTopics || [],
      additionalTopics: validationData.additionalTopics || [],
      validationSummary: validationData.validationSummary || 'An√°lise conclu√≠da'
    };
  } catch (perplexityError) {
    console.error('‚ùå Perplexity indispon√≠vel, usando valida√ß√£o b√°sica:', perplexityError);
    
    // Fallback completo - t√≥picos b√°sicos padr√£o para Mec√¢nica Vetorial
    const basicTopics = [
      'Conceitos fundamentais de vetores',
      'Opera√ß√µes vetoriais b√°sicas', 
      'Sistemas de for√ßas',
      'Equil√≠brio de part√≠culas',
      'Equil√≠brio de corpos r√≠gidos',
      'Momento e torque',
      'Centro de gravidade',
      'An√°lise de estruturas simples'
    ];
    
    return {
      suggestedTopics: basicTopics,
      missingTopics: basicTopics.filter(topic => 
        !currentTopics.some(current => 
          current.toLowerCase().includes(topic.toLowerCase().split(' ')[0])
        )
      ),
      additionalTopics: [],
      validationSummary: 'Valida√ß√£o b√°sica realizada (APIs externas indispon√≠veis). T√≥picos fundamentais identificados.'
    };
  }
}

export interface FileAnalysisResult {
  extractedTopics: string[];
  coverageAnalysis: string;
  recommendations: string[];
  missingFromFiles: string[];
  extraInFiles: string[];
}

/**
 * Analisa documentos para melhorar conte√∫do acad√™mico
 */
export async function enhanceAcademicContentWithFiles(
  assistantId: string,
  topicTitle: string,
  academicContent: AcademicContent,
  subject: string
): Promise<{
  enhancedContent: AcademicContent;
  missingElements: string[];
  additionalFormulas: string[];
  practicalExamples: string[];
}> {
  try {
    console.log(`üî¨ Melhorando conte√∫do acad√™mico para "${topicTitle}" com documentos`);
    
    const { askAssistantWithFiles } = await import('@/lib/openai-files');
    
    const analysisQuery = `
Analise o t√≥pico "${topicTitle}" no contexto de "${subject}" e compare com os documentos que voc√™ tem acesso:

CONTE√öDO ACAD√äMICO ATUAL:
Introdu√ß√£o: ${academicContent.introduction}
Conceitos-chave: ${academicContent.keyConcepts.join(', ')}
Exemplos pr√°ticos: ${academicContent.practicalExamples.join(', ')}

Com base nos documentos, identifique:
1. F√≥rmulas importantes que deveriam estar inclu√≠das
2. Conceitos adicionais que est√£o faltando
3. Exemplos pr√°ticos espec√≠ficos dos documentos
4. Erros comuns mencionados nos materiais

Responda no formato JSON:
{
  "missingFormulas": ["f√≥rmula 1", "f√≥rmula 2", "..."],
  "additionalConcepts": ["conceito 1", "conceito 2", "..."],
  "practicalExamples": ["exemplo 1 dos documentos", "exemplo 2", "..."],
  "commonMisunderstandings": ["erro comum 1", "erro comum 2", "..."],
  "enhancedIntroduction": "Introdu√ß√£o melhorada baseada nos documentos"
}
`;

    const result = await askAssistantWithFiles(assistantId, analysisQuery);
    
    // Extrair JSON da resposta
    const jsonMatch = result.content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('Resposta n√£o cont√©m JSON v√°lido');
    }

    const analysis = JSON.parse(jsonMatch[0]);
    
    // Criar conte√∫do acad√™mico melhorado
    const enhancedContent: AcademicContent = {
      ...academicContent,
      introduction: analysis.enhancedIntroduction || academicContent.introduction,
      keyConcepts: [
        ...academicContent.keyConcepts,
        ...(analysis.additionalConcepts || [])
      ],
      practicalExamples: [
        ...academicContent.practicalExamples,
        ...(analysis.practicalExamples || [])
      ],
      commonMisunderstandings: [
        ...academicContent.commonMisunderstandings,
        ...(analysis.commonMisunderstandings || [])
      ]
    };

    console.log(`‚úÖ Conte√∫do acad√™mico melhorado para "${topicTitle}"`);
    
    return {
      enhancedContent,
      missingElements: analysis.additionalConcepts || [],
      additionalFormulas: analysis.missingFormulas || [],
      practicalExamples: analysis.practicalExamples || []
    };
  } catch (error) {
    console.error(`‚ùå Erro ao melhorar conte√∫do acad√™mico para "${topicTitle}":`, error);
    
    // Retornar conte√∫do original se falhar
    return {
      enhancedContent: academicContent,
      missingElements: [],
      additionalFormulas: [],
      practicalExamples: []
    };
  }
}

export async function analyzeUploadedFiles(
  files: { name: string; content: string }[],
  plannedTopics: string[],
  subject: string
): Promise<FileAnalysisResult> {
  console.log('üìä Analisando arquivos enviados...');

  if (!files || files.length === 0) {
    return {
      extractedTopics: [],
      coverageAnalysis: 'Nenhum arquivo foi enviado para an√°lise.',
      recommendations: ['Envie arquivos relacionados ao seu objetivo de aprendizado para uma an√°lise mais precisa.'],
      missingFromFiles: plannedTopics,
      extraInFiles: []
    };
  }

  const filesContent = files.map(f => `ARQUIVO: ${f.name}\nCONTE√öDO:\n${f.content.substring(0, 5000)}`).join('\n\n---\n\n');

  const analysisPrompt = `
Analise os seguintes arquivos relacionados ao aprendizado de "${subject}" e compare com os t√≥picos planejados:

T√ìPICOS PLANEJADOS PARA APRENDER:
${plannedTopics.map((topic, i) => `${i + 1}. ${topic}`).join('\n')}

CONTE√öDO DOS ARQUIVOS ENVIADOS:
${filesContent}

Fa√ßa uma an√°lise comparativa e responda no formato JSON:
{
  "extractedTopics": ["t√≥picos identificados nos arquivos"],
  "coverageAnalysis": "An√°lise de quanto os arquivos cobrem os t√≥picos planejados",
  "recommendations": ["recomenda√ß√µes baseadas na an√°lise"],
  "missingFromFiles": ["t√≥picos planejados que n√£o aparecem nos arquivos"],
  "extraInFiles": ["t√≥picos extras encontrados nos arquivos que podem ser √∫teis"]
}

Seja preciso na an√°lise e identifique lacunas e oportunidades.`;

  try {
    const response = await fetch(PERPLEXITY_API_BASE, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'sonar-pro',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um especialista em an√°lise educacional que compara conte√∫dos de aprendizado. Responda APENAS com JSON v√°lido.'
          },
          {
            role: 'user',
            content: analysisPrompt
          }
        ],
        max_tokens: 1500,
        temperature: 0.2,
      }),
    });

    if (!response.ok) {
      throw new Error(`Perplexity API error: ${response.status}`);
    }

    const data = await response.json();
    const content = data.choices[0].message.content;
    
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('Resposta n√£o cont√©m JSON v√°lido');
    }

    const analysisData = JSON.parse(jsonMatch[0]);
    
    return {
      extractedTopics: analysisData.extractedTopics || [],
      coverageAnalysis: analysisData.coverageAnalysis || 'An√°lise n√£o dispon√≠vel',
      recommendations: analysisData.recommendations || [],
      missingFromFiles: analysisData.missingFromFiles || [],
      extraInFiles: analysisData.extraInFiles || []
    };
  } catch (error) {
    console.error('Erro na an√°lise dos arquivos:', error);
    return {
      extractedTopics: [],
      coverageAnalysis: 'N√£o foi poss√≠vel analisar os arquivos enviados.',
      recommendations: ['Tente novamente ou verifique o formato dos arquivos.'],
      missingFromFiles: plannedTopics,
      extraInFiles: []
    };
  }
}