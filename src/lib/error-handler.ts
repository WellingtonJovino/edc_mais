/**
 * Sistema Centralizado de Tratamento de Erros
 * Fornece feedback mais informativo para usu√°rios
 */

export interface ErrorContext {
  action: string;
  component?: string;
  userId?: string;
  timestamp?: string;
  additionalInfo?: Record<string, any>;
}

export interface UserFriendlyError {
  title: string;
  message: string;
  suggestion: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  recoverable: boolean;
  errorCode?: string;
}

/**
 * Converte erros t√©cnicos em mensagens amig√°veis ao usu√°rio
 */
export function createUserFriendlyError(
  error: Error | string,
  context: ErrorContext
): UserFriendlyError {
  const errorMessage = typeof error === 'string' ? error : error.message;
  const errorStack = typeof error === 'string' ? '' : error.stack || '';

  // Log t√©cnico para desenvolvimento
  console.error(`üî¥ Erro em ${context.action}:`, {
    message: errorMessage,
    stack: errorStack,
    context,
    timestamp: new Date().toISOString()
  });

  // Mapear erros conhecidos para mensagens amig√°veis
  if (errorMessage.includes('total_topics') && errorMessage.includes('ambiguous')) {
    return {
      title: 'Problema Tempor√°rio no Sistema',
      message: 'Encontramos um problema t√©cnico ao salvar sua estrutura de curso.',
      suggestion: 'N√£o se preocupe! A estrutura foi criada com sucesso. O salvamento ser√° implementado em breve.',
      severity: 'medium',
      recoverable: true,
      errorCode: 'DB_AMBIGUOUS_COLUMN'
    };
  }

  if (errorMessage.includes('OpenAI') || errorMessage.includes('API key')) {
    return {
      title: 'Problema de Conectividade',
      message: 'N√£o conseguimos nos conectar ao servi√ßo de IA no momento.',
      suggestion: 'Verifique sua conex√£o com a internet e tente novamente em alguns minutos.',
      severity: 'high',
      recoverable: true,
      errorCode: 'AI_CONNECTION_ERROR'
    };
  }

  if (errorMessage.includes('Perplexity') || errorMessage.includes('network')) {
    return {
      title: 'Falha na Busca de Conte√∫do',
      message: 'N√£o foi poss√≠vel buscar conte√∫do acad√™mico adicional.',
      suggestion: 'O curso foi criado com informa√ß√µes b√°sicas. Voc√™ pode tentar novamente mais tarde para enriquecer o conte√∫do.',
      severity: 'low',
      recoverable: true,
      errorCode: 'CONTENT_SEARCH_ERROR'
    };
  }

  if (errorMessage.includes('prerequisite') || errorMessage.includes('pr√©-requisito')) {
    return {
      title: 'Erro na An√°lise de Pr√©-requisitos',
      message: 'N√£o conseguimos analisar completamente os pr√©-requisitos do curso.',
      suggestion: 'O curso foi criado normalmente. Voc√™ pode revisar os pr√©-requisitos manualmente.',
      severity: 'low',
      recoverable: true,
      errorCode: 'PREREQUISITE_ANALYSIS_ERROR'
    };
  }

  if (errorMessage.includes('file') || errorMessage.includes('upload')) {
    return {
      title: 'Problema com Arquivo',
      message: 'Houve um problema ao processar um dos arquivos enviados.',
      suggestion: 'Verifique se o arquivo n√£o est√° corrompido e tente fazer upload novamente.',
      severity: 'medium',
      recoverable: true,
      errorCode: 'FILE_PROCESSING_ERROR'
    };
  }

  if (errorMessage.includes('timeout') || errorMessage.includes('tempo limite')) {
    return {
      title: 'Tempo Limite Excedido',
      message: 'A opera√ß√£o demorou mais do que o esperado para ser conclu√≠da.',
      suggestion: 'Tente dividir sua solicita√ß√£o em partes menores ou aguarde alguns minutos antes de tentar novamente.',
      severity: 'medium',
      recoverable: true,
      errorCode: 'TIMEOUT_ERROR'
    };
  }

  if (context.action.includes('gerar') || context.action.includes('criar')) {
    return {
      title: 'Falha na Gera√ß√£o de Conte√∫do',
      message: 'N√£o conseguimos gerar o conte√∫do solicitado completamente.',
      suggestion: 'Tente refinar sua solicita√ß√£o ou usar termos mais espec√≠ficos.',
      severity: 'medium',
      recoverable: true,
      errorCode: 'CONTENT_GENERATION_ERROR'
    };
  }

  // Erro gen√©rico
  return {
    title: 'Erro Inesperado',
    message: 'Algo n√£o funcionou como esperado.',
    suggestion: 'Tente novamente. Se o problema persistir, entre em contato com o suporte.',
    severity: 'high',
    recoverable: true,
    errorCode: 'GENERIC_ERROR'
  };
}

/**
 * Formata erro para exibi√ß√£o no chat
 */
export function formatErrorForChat(friendlyError: UserFriendlyError): string {
  const severityIcon = {
    low: '‚ö†Ô∏è',
    medium: 'üî∂',
    high: 'üî¥',
    critical: 'üí•'
  }[friendlyError.severity];

  const recoveryText = friendlyError.recoverable
    ? '\n\nüîÑ **Voc√™ pode tentar novamente**'
    : '\n\n‚ö° **Falha cr√≠tica - entre em contato com suporte**';

  return `${severityIcon} **${friendlyError.title}**

${friendlyError.message}

üí° **Como resolver:**
${friendlyError.suggestion}${recoveryText}

${friendlyError.errorCode ? `\nüè∑Ô∏è C√≥digo: \`${friendlyError.errorCode}\`` : ''}`;
}

/**
 * Wrapper para fun√ß√µes que podem falhar
 */
export async function withErrorHandling<T>(
  operation: () => Promise<T>,
  context: ErrorContext
): Promise<{ success: true; data: T } | { success: false; error: UserFriendlyError }> {
  try {
    const data = await operation();
    return { success: true, data };
  } catch (error) {
    const friendlyError = createUserFriendlyError(error as Error, context);
    return { success: false, error: friendlyError };
  }
}

/**
 * Retry com backoff exponencial
 */
export async function retryWithBackoff<T>(
  operation: () => Promise<T>,
  context: ErrorContext,
  maxRetries: number = 3,
  baseDelay: number = 1000
): Promise<T> {
  let lastError: Error | undefined;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await operation();
    } catch (error) {
      lastError = error as Error;

      if (attempt === maxRetries) {
        break;
      }

      // Backoff exponencial: 1s, 2s, 4s...
      const delay = baseDelay * Math.pow(2, attempt - 1);
      console.warn(`üîÑ Tentativa ${attempt} falhou, tentando novamente em ${delay}ms:`, error);

      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }

  throw lastError;
}

/**
 * Log estruturado de erros para monitoramento
 */
export function logError(
  error: Error | string,
  context: ErrorContext,
  severity: 'low' | 'medium' | 'high' | 'critical' = 'medium'
) {
  const errorData = {
    timestamp: new Date().toISOString(),
    message: typeof error === 'string' ? error : error.message,
    stack: typeof error === 'string' ? '' : error.stack,
    context,
    severity,
    userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : 'server',
    url: typeof window !== 'undefined' ? window.location.href : 'server'
  };

  // Log local
  console.error('üìä Error Log:', errorData);

  // Em produ√ß√£o, aqui enviaria para servi√ßo de monitoramento (Sentry, etc.)
  // if (process.env.NODE_ENV === 'production') {
  //   sendToMonitoringService(errorData);
  // }
}