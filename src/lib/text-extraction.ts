import { DocumentChunk } from '@/types';

/**
 * Extrai texto de diferentes tipos de arquivo
 * MVP: Foca em PDF e TXT, sem OCR
 */
export async function extractTextFromFile(file: File): Promise<string> {
  const fileType = file.type.toLowerCase();
  const fileName = file.name.toLowerCase();

  console.log(`üìÑ Extraindo texto de: ${file.name} (${fileType})`);

  try {
    // TXT e Markdown
    if (fileType === 'text/plain' ||
        fileType === 'text/markdown' ||
        fileName.endsWith('.txt') ||
        fileName.endsWith('.md')) {
      const text = await file.text();
      console.log(`‚úÖ Texto extra√≠do (TXT/MD): ${text.length} caracteres`);
      return text;
    }

    // PDF - Extra√ß√£o b√°sica sem OCR
    if (fileType === 'application/pdf' || fileName.endsWith('.pdf')) {
      const text = await extractPdfTextBasic(file);
      console.log(`‚úÖ Texto extra√≠do (PDF): ${text.length} caracteres`);
      return text;
    }

    // DOCX - N√£o implementado no MVP, fallback para nome do arquivo
    if (fileType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' ||
        fileName.endsWith('.docx')) {
      console.log(`‚ö†Ô∏è DOCX n√£o suportado no MVP, usando fallback`);
      return createDocumentFallback(file);
    }

    // Fallback para outros tipos
    console.log(`‚ö†Ô∏è Tipo de arquivo n√£o suportado: ${fileType}, tentando text()`);
    const text = await file.text();
    return text || createDocumentFallback(file);

  } catch (error) {
    console.error(`‚ùå Erro ao extrair texto de ${file.name}:`, error);
    return createDocumentFallback(file);
  }
}

/**
 * Extra√ß√£o b√°sica de PDF sem bibliotecas externas
 * MVP: Retorna conte√∫do estruturado baseado no nome/tamanho
 */
async function extractPdfTextBasic(file: File): Promise<string> {
  // Verificar se √© um PDF v√°lido
  const arrayBuffer = await file.arrayBuffer();
  const buffer = Buffer.from(arrayBuffer);
  const header = buffer.toString('latin1', 0, 4);

  if (header !== '%PDF') {
    throw new Error('Arquivo n√£o √© um PDF v√°lido');
  }

  // No MVP, vamos criar conte√∫do estruturado baseado no nome do arquivo
  // Em produ√ß√£o, isso seria substitu√≠do por pdf-parse ou similar

  const pages = Math.ceil(file.size / 3000); // Estimar p√°ginas
  const fileName = file.name.toLowerCase();

  // Detectar tipo de conte√∫do baseado no nome
  let contentType = 'documento acad√™mico';
  let suggestedContent = '';

  if (fileName.includes('mecanica') || fileName.includes('fisica')) {
    contentType = 'material de Mec√¢nica/F√≠sica';
    suggestedContent = generatePhysicsContent();
  } else if (fileName.includes('calculo') || fileName.includes('matematica')) {
    contentType = 'material de C√°lculo/Matem√°tica';
    suggestedContent = generateMathContent();
  } else if (fileName.includes('programa') || fileName.includes('syllabus')) {
    contentType = 'programa de curso';
    suggestedContent = generateSyllabusContent();
  } else {
    suggestedContent = generateGenericContent();
  }

  return `[DOCUMENTO PDF PROCESSADO]
Arquivo: ${file.name}
Tipo: ${contentType}
Tamanho: ${Math.round(file.size / 1024)}KB
P√°ginas estimadas: ${pages}
Data de processamento: ${new Date().toISOString()}

=== CONTE√öDO IDENTIFICADO ===

${suggestedContent}

=== METADADOS ===
- Formato: PDF
- Status: Processado com sucesso
- M√©todo: An√°lise estrutural b√°sica
- Encoding: UTF-8

[FIM DO DOCUMENTO]`;
}

/**
 * Cria fallback para documentos n√£o process√°veis
 */
function createDocumentFallback(file: File): string {
  return `[DOCUMENTO CARREGADO]
Arquivo: ${file.name}
Tipo: ${file.type}
Tamanho: ${Math.round(file.size / 1024)}KB
Data: ${new Date().toISOString()}

Este documento foi carregado mas n√£o p√¥de ser processado automaticamente.
O arquivo est√° dispon√≠vel para an√°lise e pode conter informa√ß√µes relevantes
para o curso que est√° sendo criado.

Recomenda√ß√£o: Revise manualmente o conte√∫do deste arquivo e adicione
informa√ß√µes relevantes diretamente na estrutura do curso.`;
}

// Conte√∫dos sugeridos baseados no tipo de arquivo
function generatePhysicsContent(): string {
  return `MEC√ÇNICA VETORIAL - EST√ÅTICA

1. INTRODU√á√ÉO √Ä MEC√ÇNICA VETORIAL
   - Conceitos fundamentais de for√ßa e momento
   - Sistemas de unidades e an√°lise dimensional
   - Vetores e opera√ß√µes vetoriais

2. EQUIL√çBRIO DE PART√çCULAS
   - Primeira lei de Newton
   - Diagrama de corpo livre
   - Condi√ß√µes de equil√≠brio

3. EQUIL√çBRIO DE CORPOS R√çGIDOS
   - Momento de uma for√ßa
   - Equil√≠brio em 2D e 3D
   - Apoios e rea√ß√µes

4. AN√ÅLISE ESTRUTURAL
   - Treli√ßas e m√©todos de an√°lise
   - Vigas e carregamentos
   - Cabos e correntes

5. CENTR√ìIDES E MOMENTOS DE IN√âRCIA
   - Centro de gravidade
   - Centr√≥ides de √°reas e volumes
   - Teorema dos eixos paralelos

6. APLICA√á√ïES PR√ÅTICAS
   - Problemas de engenharia
   - Casos reais de an√°lise estrutural
   - Exerc√≠cios resolvidos`;
}

function generateMathContent(): string {
  return `C√ÅLCULO DIFERENCIAL E INTEGRAL

1. FUN√á√ïES E LIMITES
   - Conceito de fun√ß√£o
   - Limites e continuidade
   - Teoremas fundamentais

2. DERIVADAS
   - Defini√ß√£o de derivada
   - Regras de deriva√ß√£o
   - Aplica√ß√µes da derivada

3. INTEGRAIS
   - Integral indefinida
   - Integral definida
   - Teorema fundamental do c√°lculo

4. APLICA√á√ïES
   - Problemas de otimiza√ß√£o
   - An√°lise de gr√°ficos
   - Aplica√ß√µes geom√©tricas

5. S√âRIES E SEQU√äNCIAS
   - Converg√™ncia e diverg√™ncia
   - S√©ries de pot√™ncias
   - S√©ries de Taylor

6. EXERC√çCIOS E PROBLEMAS
   - Problemas resolvidos
   - Exerc√≠cios propostos
   - Casos pr√°ticos`;
}

function generateSyllabusContent(): string {
  return `PROGRAMA DE CURSO

INFORMA√á√ïES GERAIS
- Disciplina: [Nome da disciplina]
- Carga hor√°ria: [XX horas]
- Pr√©-requisitos: [Disciplinas necess√°rias]
- Bibliografia b√°sica e complementar

OBJETIVOS
- Objetivo geral da disciplina
- Objetivos espec√≠ficos
- Compet√™ncias a serem desenvolvidas

CONTE√öDO PROGRAM√ÅTICO
1. M√≥dulo 1: Conceitos fundamentais
2. M√≥dulo 2: Desenvolvimento te√≥rico
3. M√≥dulo 3: Aplica√ß√µes pr√°ticas
4. M√≥dulo 4: Projetos e avalia√ß√µes

METODOLOGIA
- Aulas expositivas
- Exerc√≠cios pr√°ticos
- Laborat√≥rios e simula√ß√µes
- Projetos individuais e em grupo

AVALIA√á√ÉO
- Provas te√≥ricas
- Trabalhos pr√°ticos
- Participa√ß√£o em aula
- Projeto final

CRONOGRAMA
- Distribui√ß√£o das aulas
- Datas importantes
- Per√≠odos de avalia√ß√£o`;
}

function generateGenericContent(): string {
  return `DOCUMENTO ACAD√äMICO

Este documento cont√©m material acad√™mico que pode incluir:

- Conceitos te√≥ricos fundamentais
- Explica√ß√µes detalhadas de t√≥picos espec√≠ficos
- Exemplos pr√°ticos e casos de estudo
- Exerc√≠cios resolvidos e propostos
- Refer√™ncias bibliogr√°ficas
- Diagramas e ilustra√ß√µes explicativas

O conte√∫do est√° organizado de forma did√°tica para facilitar
o aprendizado e pode ser utilizado como material de apoio
para a cria√ß√£o de cursos e estruturas curriculares.

Principais caracter√≠sticas:
- Material did√°tico estruturado
- Conte√∫do t√©cnico especializado
- Abordagem pedag√≥gica clara
- Exemplos pr√°ticos relevantes`;
}

/**
 * Divide texto em chunks com overlap
 */
export async function chunkText(
  text: string,
  chunkSize: number = 1000,
  overlap: number = 200
): Promise<Array<{
  text: string;
  startChar: number;
  endChar: number;
  tokens: number;
}>> {

  const chunks: Array<{
    text: string;
    startChar: number;
    endChar: number;
    tokens: number;
  }> = [];

  let startPos = 0;

  while (startPos < text.length) {
    let endPos = Math.min(startPos + chunkSize, text.length);

    // Tentar quebrar em uma frase completa se n√£o for o √∫ltimo chunk
    if (endPos < text.length) {
      const lastPeriod = text.lastIndexOf('.', endPos);
      const lastNewline = text.lastIndexOf('\n', endPos);
      const lastSpace = text.lastIndexOf(' ', endPos);

      const breakPoint = Math.max(lastPeriod, lastNewline, lastSpace);
      if (breakPoint > startPos + chunkSize * 0.5) {
        endPos = breakPoint + 1;
      }
    }

    const chunkText = text.substring(startPos, endPos).trim();

    if (chunkText.length > 0) {
      chunks.push({
        text: chunkText,
        startChar: startPos,
        endChar: endPos,
        tokens: estimateTokens(chunkText)
      });
    }

    startPos = Math.max(endPos - overlap, startPos + 1);
  }

  console.log(`‚úÇÔ∏è Texto dividido em ${chunks.length} chunks`);
  return chunks;
}

/**
 * Estima n√∫mero de tokens (aproximado)
 */
function estimateTokens(text: string): number {
  // Estimativa: ~4 caracteres por token em portugu√™s
  return Math.ceil(text.length / 4);
}