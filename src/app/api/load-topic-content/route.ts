import { NextRequest, NextResponse } from 'next/server';
import { searchVideosByTopics } from '@/lib/youtube';
import { searchAcademicContent, generateAcademicSummary } from '@/lib/perplexity';
import { updateCourseProgress } from '@/lib/supabase';

export async function POST(request: NextRequest) {
  try {
    const { topicTitle, topicId, courseId } = await request.json();

    if (!topicTitle || !topicId) {
      return NextResponse.json(
        { error: 'topicTitle e topicId s√£o obrigat√≥rios' },
        { status: 400 }
      );
    }

    console.log(`üîÑ Carregando conte√∫do para t√≥pico: "${topicTitle}"`);

    // Buscar v√≠deos para o t√≥pico espec√≠fico
    console.log('üé¨ Buscando v√≠deos...');
    const topicForSearch = [{ title: topicTitle, description: '', keywords: [topicTitle.toLowerCase()], order: 1 }];
    const videosResults = await searchVideosByTopics(topicForSearch);
    const videos = videosResults[topicTitle] || [];

    // Buscar conte√∫do acad√™mico
    console.log('üéì Buscando conte√∫do acad√™mico...');
    let academicContent = null;
    
    try {
      const perplexityResponse = await searchAcademicContent({
        query: topicTitle,
        language: 'pt'
      });
      
      academicContent = await generateAcademicSummary(
        topicTitle,
        perplexityResponse
      );
    } catch (error) {
      console.error('‚ùå Erro ao buscar conte√∫do acad√™mico:', error);
    }

    // Se h√° um courseId, podemos atualizar o t√≥pico no banco de dados
    if (courseId) {
      try {
        // Aqui voc√™ poderia adicionar uma fun√ß√£o para atualizar o t√≥pico espec√≠fico
        // Por enquanto, vamos apenas logar
        console.log(`üíæ T√≥pico ${topicId} do curso ${courseId} atualizado com conte√∫do`);
      } catch (error) {
        console.warn('‚ö†Ô∏è N√£o foi poss√≠vel atualizar o t√≥pico no banco:', error);
      }
    }

    return NextResponse.json({
      success: true,
      data: {
        topicId,
        videos,
        academicContent,
        message: `Conte√∫do carregado para: ${topicTitle}`
      }
    });

  } catch (error) {
    console.error('Erro na API /load-topic-content:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}