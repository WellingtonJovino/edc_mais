import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * Sanitiza resposta JSON do GPT removendo markdown e caracteres problem√°ticos
 */
function sanitizeJsonResponse(content: string): string {
  // Remove cercas de c√≥digo markdown
  let cleaned = content.replace(/```json\s*/g, '').replace(/```\s*/g, '');

  // Remove caracteres de controle
  cleaned = cleaned.replace(/[\u0000-\u0008\u000B-\u000C\u000E-\u001F\u007f-\u009f]/g, '');

  // Procura o primeiro { e √∫ltimo }
  const firstBrace = cleaned.indexOf('{');
  const lastBrace = cleaned.lastIndexOf('}');

  if (firstBrace !== -1 && lastBrace !== -1 && firstBrace < lastBrace) {
    cleaned = cleaned.substring(firstBrace, lastBrace + 1);
  }

  return cleaned.trim();
}

/**
 * Extrai o assunto que o usu√°rio quer aprender usando GPT
 */
export async function extractLearningSubject(userMessage: string): Promise<{
  subject: string;
  context: string;
  isContextUseful: boolean;
}> {
  try {
    console.log(`üîç Extraindo assunto da mensagem: "${userMessage}"`);

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-2024-11-20",
      messages: [
        {
          role: 'system',
          content: `Voc√™ √© um especialista em an√°lise de texto educacional. Sua tarefa √© extrair exatamente o que o usu√°rio quer aprender e separar o contexto √∫til do desnecess√°rio.

RETORNE APENAS JSON no formato:
{
  "subject": "assunto principal que quer aprender",
  "context": "contexto √∫til para personalizar o curso",
  "isContextUseful": true/false
}

Regras:
1. "subject" deve ser o t√≥pico principal, limpo e direto
2. "context" inclui apenas informa√ß√µes √∫teis como n√≠vel, objetivo, tempo, experi√™ncia
3. "isContextUseful" = true se h√° contexto relevante, false se apenas palavras desnecess√°rias
4. Remova palavras como "quero aprender", "me ensine", "preciso saber", etc.`
        },
        {
          role: 'user',
          content: userMessage
        }
      ],
      max_tokens: 300,
      temperature: 0.1,
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }

    const cleanedContent = sanitizeJsonResponse(content);
    const result = JSON.parse(cleanedContent);
    console.log(`‚úÖ Assunto extra√≠do: "${result.subject}" | Contexto √∫til: ${result.isContextUseful}`);

    return result;

  } catch (error) {
    console.error('‚ùå Erro ao extrair assunto, usando fallback:', error);
    // Fallback simples
    const subject = userMessage
      .replace(/quero aprender|me ensine|preciso saber|gostaria de aprender/gi, '')
      .trim();

    return {
      subject: subject || userMessage,
      context: '',
      isContextUseful: false
    };
  }
}

/**
 * Detecta a disciplina usando GPT ao inv√©s de correspond√™ncia est√°tica
 */
export async function detectSubjectWithGPT(userMessage: string): Promise<{
  discipline: string;
  confidence: number;
  isAcademic: boolean;
}> {
  try {
    console.log(`üéì Detectando disciplina com GPT: "${userMessage}"`);

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-2024-11-20",
      messages: [
        {
          role: 'system',
          content: `Voc√™ √© um especialista em classifica√ß√£o de disciplinas acad√™micas. Analise a mensagem e determine:

1. A disciplina/mat√©ria espec√≠fica que o usu√°rio quer aprender
2. Se √© uma disciplina acad√™mica formal ou assunto geral
3. Seu n√≠vel de confian√ßa na classifica√ß√£o

RETORNE APENAS JSON:
{
  "discipline": "nome da disciplina (ex: Mec√¢nica Vetorial Est√°tica, Qu√≠mica Geral, F√≠sica I)",
  "confidence": 0.95,
  "isAcademic": true/false
}

Regras:
- Se for uma disciplina universit√°ria espec√≠fica (ex: "mec√¢nica vetorial est√°tica"), mantenha o nome completo
- Se for um assunto geral (ex: "qu√≠mica"), classifique como "Qu√≠mica Geral"
- confidence deve ser entre 0 e 1
- isAcademic = true para disciplinas formais, false para assuntos gerais`
        },
        {
          role: 'user',
          content: userMessage
        }
      ],
      max_tokens: 200,
      temperature: 0.1,
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }

    const cleanedContent = sanitizeJsonResponse(content);
    const result = JSON.parse(cleanedContent);
    console.log(`‚úÖ Disciplina detectada: "${result.discipline}" (confian√ßa: ${result.confidence})`);

    return result;

  } catch (error) {
    console.error('‚ùå Erro na detec√ß√£o GPT, usando fallback:', error);
    return {
      discipline: userMessage,
      confidence: 0.5,
      isAcademic: false
    };
  }
}

/**
 * Gera prompt otimizado para o Perplexity usando GPT
 */
export async function generatePerplexityPrompt(subject: string): Promise<string> {
  try {
    console.log(`üìù Gerando prompt Perplexity para: "${subject}"`);

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-2024-11-20",
      messages: [
        {
          role: 'system',
          content: `Voc√™ √© um especialista em design de prompts para pesquisa acad√™mica. Crie um prompt otimizado para ser enviado ao Perplexity que ir√° buscar informa√ß√µes sobre estrutura curricular.

O prompt deve:
1. Ser espec√≠fico para a disciplina/assunto fornecido
2. Pedir m√≥dulos, t√≥picos e subt√≥picos detalhados
3. Solicitar sequ√™ncia pedag√≥gica apropriada
4. Incluir refer√™ncias acad√™micas quando poss√≠vel

RETORNE APENAS o texto do prompt, sem aspas ou formata√ß√£o JSON.`
        },
        {
          role: 'user',
          content: `Quero montar a estrutura de um curso completo sobre "${subject}". Escreva um prompt para eu mandar no Perplexity para conseguir os m√≥dulos, t√≥picos e subt√≥picos necess√°rios para um curso abrangente de ${subject}.`
        }
      ],
      max_tokens: 500,
      temperature: 0.3,
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }

    console.log(`‚úÖ Prompt Perplexity gerado (${content.length} caracteres)`);
    return content.trim();

  } catch (error) {
    console.error('‚ùå Erro ao gerar prompt Perplexity, usando fallback:', error);
    // Fallback com prompt gen√©rico mas funcional
    return `Quais s√£o os principais m√≥dulos, t√≥picos e subt√≥picos necess√°rios para um curso universit√°rio completo de ${subject}? Liste de forma estruturada e hier√°rquica, incluindo sequ√™ncia pedag√≥gica apropriada e refer√™ncias curriculares de universidades reconhecidas.`;
  }
}