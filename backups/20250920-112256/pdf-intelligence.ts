import { askAssistantWithFiles } from './openai-files';

export interface PDFIntelligentAnalysis {
  topicCoverage: {
    topic: string;
    covered: boolean;
    details: string[];
    missingElements: string[];
  }[];
  keyFormulas: {
    name: string;
    formula: string;
    context: string;
    page?: number;
  }[];
  practicalExamples: {
    title: string;
    description: string;
    context: string;
  }[];
  conceptualGaps: string[];
  enhancementSuggestions: string[];
}

/**
 * An√°lise inteligente de PDFs usando OpenAI File Search
 * Extrai informa√ß√µes espec√≠ficas para melhorar aulas-texto
 */
export async function analyzeTopicWithPDFs(
  assistantId: string,
  topic: string,
  courseArea: string,
  level: 'beginner' | 'intermediate' | 'advanced'
): Promise<PDFIntelligentAnalysis> {
  try {
    console.log(`üî¨ Analisando PDFs para t√≥pico: "${topic}" na √°rea: ${courseArea}`);

    const analysisQuery = `
Analise os documentos enviados para o t√≥pico "${topic}" na √°rea de ${courseArea} (n√≠vel ${level}).

AN√ÅLISE SOLICITADA:

1. **COBERTURA DO T√ìPICO**:
   - O t√≥pico "${topic}" √© abordado nos documentos?
   - Quais aspectos espec√≠ficos s√£o cobertos?
   - Que informa√ß√µes importantes est√£o faltando?

2. **F√ìRMULAS E EQUA√á√ïES**:
   - Identifique f√≥rmulas matem√°ticas relevantes
   - Extraia a nota√ß√£o exata (para converter em LaTeX)
   - Explique o contexto de cada f√≥rmula

3. **EXEMPLOS PR√ÅTICOS**:
   - Encontre exemplos resolvidos ou casos pr√°ticos
   - Identifique aplica√ß√µes do mundo real
   - Extraia dados num√©ricos espec√≠ficos

4. **LACUNAS CONCEITUAIS**:
   - Que conceitos fundamentais n√£o est√£o nos documentos?
   - Que explica√ß√µes precisam ser complementadas?

5. **SUGEST√ïES DE MELHORIA**:
   - Como usar os documentos para enriquecer uma aula sobre "${topic}"?
   - Que elementos visuais seriam √∫teis?

FORMATO DE RESPOSTA:
Retorne um JSON estruturado com:

{
  "topicCoverage": [{
    "topic": "${topic}",
    "covered": true/false,
    "details": ["detalhe1", "detalhe2"],
    "missingElements": ["elemento1", "elemento2"]
  }],
  "keyFormulas": [{
    "name": "Nome da f√≥rmula",
    "formula": "Nota√ß√£o matem√°tica exata",
    "context": "Onde e como √© usada",
    "page": n√∫mero_da_p√°gina
  }],
  "practicalExamples": [{
    "title": "T√≠tulo do exemplo",
    "description": "Descri√ß√£o detalhada",
    "context": "Contexto de aplica√ß√£o"
  }],
  "conceptualGaps": ["conceito1 n√£o abordado", "conceito2 superficial"],
  "enhancementSuggestions": ["sugest√£o1", "sugest√£o2"]
}

IMPORTANTE:
- Seja espec√≠fico e baseie-se apenas no conte√∫do dos documentos
- Se n√£o encontrar informa√ß√µes, indique claramente
- Priorize informa√ß√µes que podem melhorar uma aula did√°tica
`;

    const result = await askAssistantWithFiles(assistantId, analysisQuery);

    // Extrair JSON da resposta
    const jsonMatch = result.content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      console.warn('‚ö†Ô∏è Resposta n√£o cont√©m JSON v√°lido, usando estrutura padr√£o');
      return createEmptyAnalysis(topic);
    }

    const analysis = JSON.parse(jsonMatch[0]);
    console.log(`‚úÖ An√°lise PDF conclu√≠da para "${topic}"`);

    return analysis as PDFIntelligentAnalysis;
  } catch (error) {
    console.error(`‚ùå Erro na an√°lise PDF do t√≥pico "${topic}":`, error);
    return createEmptyAnalysis(topic);
  }
}

/**
 * Enriquece uma aula-texto com informa√ß√µes extra√≠das dos PDFs
 */
export async function enrichAulaTextoWithPDFs(
  assistantId: string,
  topic: string,
  aulaTextoContent: string,
  courseArea: string
): Promise<{
  enhancedContent: string;
  addedElements: string[];
  pdfFormulas: { name: string; latex: string; explanation: string; }[];
  pdfExamples: { title: string; description: string; solution?: string; }[];
}> {
  try {
    console.log(`üöÄ Enriquecendo aula-texto de "${topic}" com PDFs`);

    const enrichmentQuery = `
Baseando-se nos documentos enviados, ENRIQUE√áA o seguinte conte√∫do de aula sobre "${topic}" na √°rea de ${courseArea}:

CONTE√öDO ATUAL DA AULA:
${aulaTextoContent.substring(0, 3000)}...

TAREFAS DE ENRIQUECIMENTO:

1. **F√ìRMULAS DOS DOCUMENTOS**:
   - Identifique f√≥rmulas espec√≠ficas dos documentos que complementam a aula
   - Converta para LaTeX correto
   - Adicione contexto pr√°tico dos documentos

2. **EXEMPLOS DOS DOCUMENTOS**:
   - Encontre exemplos espec√≠ficos dos PDFs
   - Extraia dados num√©ricos reais
   - Inclua contexto original dos documentos

3. **MELHORIAS NO CONTE√öDO**:
   - Que informa√ß√µes dos documentos podem tornar a explica√ß√£o mais espec√≠fica?
   - Como conectar a teoria da aula com a pr√°tica dos documentos?

4. **ELEMENTOS VISUAIS**:
   - Que diagramas ou figuras dos documentos seriam √∫teis?
   - Descreva elementos visuais para gera√ß√£o de imagens

FORMATO DE RESPOSTA JSON:
{
  "enhancedContent": "Vers√£o melhorada do conte√∫do da aula",
  "addedElements": ["elemento1 adicionado", "elemento2"],
  "pdfFormulas": [{
    "name": "Nome",
    "latex": "F√≥rmula em LaTeX",
    "explanation": "Explica√ß√£o baseada nos documentos"
  }],
  "pdfExamples": [{
    "title": "T√≠tulo",
    "description": "Exemplo dos documentos",
    "solution": "Solu√ß√£o se dispon√≠vel"
  }]
}

IMPORTANTE: Base-se EXCLUSIVAMENTE no conte√∫do dos documentos enviados.
`;

    const result = await askAssistantWithFiles(assistantId, enrichmentQuery);

    const jsonMatch = result.content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      return {
        enhancedContent: aulaTextoContent,
        addedElements: [],
        pdfFormulas: [],
        pdfExamples: []
      };
    }

    const enrichment = JSON.parse(jsonMatch[0]);
    console.log(`‚úÖ Aula-texto enriquecida com ${enrichment.addedElements?.length || 0} elementos dos PDFs`);

    return enrichment;
  } catch (error) {
    console.error(`‚ùå Erro ao enriquecer aula-texto com PDFs:`, error);
    return {
      enhancedContent: aulaTextoContent,
      addedElements: [],
      pdfFormulas: [],
      pdfExamples: []
    };
  }
}

function createEmptyAnalysis(topic: string): PDFIntelligentAnalysis {
  return {
    topicCoverage: [{
      topic,
      covered: false,
      details: [],
      missingElements: ['An√°lise n√£o dispon√≠vel - documentos n√£o processados']
    }],
    keyFormulas: [],
    practicalExamples: [],
    conceptualGaps: ['An√°lise de lacunas indispon√≠vel'],
    enhancementSuggestions: ['Envie documentos relevantes para an√°lise personalizada']
  };
}

/**
 * Gera sugest√µes de imagens baseadas no conte√∫do dos PDFs
 */
export async function generateImageSuggestionsFromPDFs(
  assistantId: string,
  topic: string,
  courseArea: string
): Promise<{
  title: string;
  prompt: string;
  type: 'diagram' | 'graph' | 'illustration' | 'scheme';
  priority: 'high' | 'medium' | 'low';
  description: string;
}[]> {
  try {
    const imageQuery = `
Baseando-se nos documentos sobre "${topic}" na √°rea de ${courseArea}, sugira imagens educacionais que seriam √∫teis para uma aula did√°tica.

TIPOS DE IMAGENS DESEJADAS:
- Diagramas t√©cnicos
- Gr√°ficos explicativos
- Ilustra√ß√µes conceituais
- Esquemas paso-a-passo

Para cada sugest√£o, forne√ßa:
1. T√≠tulo descritivo
2. Prompt detalhado para gera√ß√£o de imagem
3. Tipo (diagram/graph/illustration/scheme)
4. Prioridade (high/medium/low)
5. Descri√ß√£o do valor educacional

Retorne JSON array com as sugest√µes.
`;

    const result = await askAssistantWithFiles(assistantId, imageQuery);
    const jsonMatch = result.content.match(/\[[\s\S]*\]/);

    if (jsonMatch) {
      return JSON.parse(jsonMatch[0]);
    }

    return [];
  } catch (error) {
    console.error('Erro ao gerar sugest√µes de imagem:', error);
    return [];
  }
}