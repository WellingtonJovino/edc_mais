/**
 * Sistema de An√°lise Pedag√≥gica Avan√ßada
 * Implementa Taxonomia de Bloom, an√°lise de dom√≠nio e personaliza√ß√£o
 */

export interface BloomLevel {
  level: number;
  name: string;
  description: string;
  actionVerbs: string[];
  characteristics: string[];
}

export interface KnowledgeDomain {
  name: string;
  type: 'technical' | 'conceptual' | 'procedural' | 'factual';
  characteristics: string[];
  typicalProgression: string[];
  assessmentMethods: string[];
}

export interface LearningObjective {
  bloomLevel: number;
  statement: string;
  assessmentCriteria: string[];
  prerequisites: string[];
}

export interface TopicStructure {
  id: string;
  title: string;
  bloomLevel: number;
  objectives: LearningObjective[];
  prerequisites: string[];
  estimatedDifficulty: 1 | 2 | 3 | 4 | 5;
  learningType: 'theory' | 'practice' | 'mixed';
  subtopics: SubtopicStructure[];
}

export interface SubtopicStructure {
  id: string;
  title: string;
  bloomLevel: number;
  type: 'concept' | 'example' | 'exercise' | 'application';
  estimatedTime: number; // em minutos
}

export interface PedagogicalAnalysis {
  domain: KnowledgeDomain;
  complexity: 'low' | 'medium' | 'high';
  recommendedApproach: 'sequential' | 'spiral' | 'modular';
  bloomProgression: number[];
  estimatedDuration: {
    total: number;
    theory: number;
    practice: number;
  };
}

/**
 * Taxonomia de Bloom com 6 n√≠veis cognitivos
 */
export const BLOOM_TAXONOMY: BloomLevel[] = [
  {
    level: 1,
    name: 'Lembrar',
    description: 'Recordar informa√ß√µes e conceitos b√°sicos',
    actionVerbs: ['definir', 'listar', 'identificar', 'nomear', 'recordar', 'reconhecer'],
    characteristics: ['memoriza√ß√£o', 'reconhecimento', 'conceitos b√°sicos']
  },
  {
    level: 2,
    name: 'Compreender',
    description: 'Explicar ideias ou conceitos',
    actionVerbs: ['explicar', 'interpretar', 'resumir', 'parafrasear', 'classificar', 'comparar'],
    characteristics: ['interpreta√ß√£o', 'tradu√ß√£o', 'extrapola√ß√£o']
  },
  {
    level: 3,
    name: 'Aplicar',
    description: 'Usar informa√ß√µes em novas situa√ß√µes',
    actionVerbs: ['aplicar', 'demonstrar', 'implementar', 'resolver', 'usar', 'executar'],
    characteristics: ['uso pr√°tico', 'transfer√™ncia', 'aplica√ß√£o']
  },
  {
    level: 4,
    name: 'Analisar',
    description: 'Dividir informa√ß√µes em partes e examinar rela√ß√µes',
    actionVerbs: ['analisar', 'categorizar', 'comparar', 'contrastar', 'diferenciar', 'examinar'],
    characteristics: ['decomposi√ß√£o', 'rela√ß√µes', 'estrutura']
  },
  {
    level: 5,
    name: 'Avaliar',
    description: 'Justificar decis√µes ou cursos de a√ß√£o',
    actionVerbs: ['avaliar', 'criticar', 'defender', 'julgar', 'justificar', 'apoiar'],
    characteristics: ['julgamento', 'cr√≠tica', 'verifica√ß√£o']
  },
  {
    level: 6,
    name: 'Criar',
    description: 'Produzir trabalho novo ou original',
    actionVerbs: ['criar', 'projetar', 'formular', 'construir', 'inventar', 'produzir'],
    characteristics: ['s√≠ntese', 'originalidade', 'planejamento']
  }
];

/**
 * Dom√≠nios de Conhecimento Especializados
 */
export const KNOWLEDGE_DOMAINS: { [key: string]: KnowledgeDomain } = {
  'programming': {
    name: 'Programa√ß√£o',
    type: 'procedural',
    characteristics: ['hands-on', 'iterativo', 'pr√°tico', 'baseado em projetos'],
    typicalProgression: ['sintaxe', 'conceitos', 'estruturas', 'algoritmos', 'projetos'],
    assessmentMethods: ['c√≥digo funcional', 'projetos', 'debugging', 'code review']
  },
  'mathematics': {
    name: 'Matem√°tica',
    type: 'conceptual',
    characteristics: ['sequencial', 'cumulativo', 'abstrato', 'baseado em problemas'],
    typicalProgression: ['defini√ß√µes', 'teoremas', 'demonstra√ß√µes', 'aplica√ß√µes', 'generaliza√ß√µes'],
    assessmentMethods: ['resolu√ß√£o de problemas', 'demonstra√ß√µes', 'aplica√ß√µes']
  },
  'science': {
    name: 'Ci√™ncias',
    type: 'factual',
    characteristics: ['experimental', 'observacional', 'baseado em evid√™ncias'],
    typicalProgression: ['observa√ß√£o', 'hip√≥teses', 'experimentos', 'teorias', 'aplica√ß√µes'],
    assessmentMethods: ['experimentos', 'relat√≥rios', 'an√°lise de dados']
  },
  'language': {
    name: 'Linguagens',
    type: 'procedural',
    characteristics: ['comunicativo', 'cultural', 'imersivo', 'pr√°tico'],
    typicalProgression: ['vocabul√°rio', 'gram√°tica', 'conversa√ß√£o', 'cultura', 'flu√™ncia'],
    assessmentMethods: ['conversa√ß√£o', 'escrita', 'compreens√£o', 'cultural']
  },
  'business': {
    name: 'Neg√≥cios',
    type: 'conceptual',
    characteristics: ['caso-baseado', 'estrat√©gico', 'pr√°tico', 'colaborativo'],
    typicalProgression: ['conceitos', 'frameworks', 'casos', 'estrat√©gias', 'implementa√ß√£o'],
    assessmentMethods: ['estudos de caso', 'simula√ß√µes', 'projetos', 'apresenta√ß√µes']
  },
  'engineering': {
    name: 'Engenharia',
    type: 'technical',
    characteristics: ['problema-baseado', 'matem√°tico', 'pr√°tico', 'sistem√°tico'],
    typicalProgression: ['fundamentos', 'teoria', 'c√°lculos', 'projeto', 'implementa√ß√£o'],
    assessmentMethods: ['c√°lculos', 'projetos', 'simula√ß√µes', 'prot√≥tipos']
  }
};

/**
 * Analisa o dom√≠nio de conhecimento baseado na mensagem do usu√°rio
 */
export function analyzeDomain(message: string): KnowledgeDomain {
  const lowercaseMessage = message.toLowerCase();

  // Fun√ß√£o para normalizar texto (remover acentos)
  function normalizeText(text: string): string {
    return text
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, ''); // Remove acentos
  }

  // Palavras-chave para cada dom√≠nio (com e sem acentos)
  const domainKeywords = {
    programming: ['programacao', 'programa√ß√£o', 'codigo', 'c√≥digo', 'javascript', 'python', 'java', 'react', 'node', 'desenvolvimento', 'software', 'app', 'sistema'],
    mathematics: ['matematica', 'matem√°tica', 'calculo', 'c√°lculo', 'algebra', '√°lgebra', 'geometria', 'estatistica', 'estat√≠stica', 'equacao', 'equa√ß√£o', 'funcao', 'fun√ß√£o', 'integral', 'derivada', 'limite', 'limites', 'diferencial'],
    science: ['fisica', 'f√≠sica', 'quimica', 'qu√≠mica', 'biologia', 'experimento', 'teoria', 'cientifico', 'cient√≠fico', 'pesquisa', 'laboratorio', 'laborat√≥rio'],
    language: ['ingles', 'ingl√™s', 'portugues', 'portugu√™s', 'espanhol', 'idioma', 'linguagem', 'conversacao', 'conversa√ß√£o', 'gramatica', 'gram√°tica', 'vocabulario', 'vocabul√°rio'],
    business: ['negocios', 'neg√≥cios', 'gestao', 'gest√£o', 'marketing', 'vendas', 'estrategia', 'estrat√©gia', 'empresa', 'mercado', 'empreendedorismo'],
    engineering: ['engenharia', 'mecanica', 'mec√¢nica', 'civil', 'eletrica', 'el√©trica', 'estruturas', 'projeto', 'calculo estrutural', 'c√°lculo estrutural', 'resistencia', 'resist√™ncia', 'vetorial', 'estatica', 'est√°tica', 'dinamica', 'din√¢mica', 'forcas', 'for√ßas', 'torque', 'momento', 'trelicas', 'treli√ßas', 'materiais', 'mecanico', 'mec√¢nico', 'estrutural']
  };

  // Contar matches para cada dom√≠nio
  let maxMatches = 0;
  let bestDomain = 'programming'; // default

  const normalizedMessage = normalizeText(lowercaseMessage);
  console.log('üîç Analisando dom√≠nio para:', lowercaseMessage);
  console.log('üìù Texto normalizado:', normalizedMessage);

  for (const [domain, keywords] of Object.entries(domainKeywords)) {
    const matches = keywords.filter(keyword => normalizedMessage.includes(normalizeText(keyword))).length;
    if (matches > 0) {
      console.log(`üéØ ${domain}: ${matches} matches`, keywords.filter(keyword => normalizedMessage.includes(normalizeText(keyword))));
    }
    if (matches > maxMatches) {
      maxMatches = matches;
      bestDomain = domain;
    }
  }

  console.log(`‚úÖ Dom√≠nio selecionado: ${bestDomain} (${maxMatches} matches)`);

  return KNOWLEDGE_DOMAINS[bestDomain];
}

/**
 * Detecta o n√≠vel acad√™mico de uma mat√©ria espec√≠fica
 */
function getSubjectLevel(message: string): 'beginner' | 'intermediate' | 'advanced' {
  const normalizedMessage = message.toLowerCase();

  // Mat√©rias avan√ßadas
  const advancedSubjects = [
    'calculo 2', 'c√°lculo 2', 'calculo ii', 'c√°lculo ii',
    'calculo 3', 'c√°lculo 3', 'calculo iii', 'c√°lculo iii',
    'calculo vetorial', 'c√°lculo vetorial',
    'equacoes diferenciais', 'equa√ß√µes diferenciais',
    'algebra linear avancada', '√°lgebra linear avan√ßada',
    'fisica quantica', 'f√≠sica qu√¢ntica',
    'mecanica dos fluidos', 'mec√¢nica dos fluidos',
    'termodinamica avancada', 'termodin√¢mica avan√ßada',
    'resistencia dos materiais', 'resist√™ncia dos materiais',
    'analise estrutural', 'an√°lise estrutural'
  ];

  // Mat√©rias intermedi√°rias
  const intermediateSubjects = [
    'calculo 1', 'c√°lculo 1', 'calculo i', 'c√°lculo i',
    'algebra linear', '√°lgebra linear',
    'fisica 2', 'f√≠sica 2',
    'quimica organica', 'qu√≠mica org√¢nica',
    'mecanica vetorial', 'mec√¢nica vetorial',
    'estatistica', 'estat√≠stica',
    'probabilidade'
  ];

  // Verificar se √© mat√©ria avan√ßada
  for (const subject of advancedSubjects) {
    if (normalizedMessage.includes(subject)) {
      return 'advanced';
    }
  }

  // Verificar se √© mat√©ria intermedi√°ria
  for (const subject of intermediateSubjects) {
    if (normalizedMessage.includes(subject)) {
      return 'intermediate';
    }
  }

  return 'beginner';
}

/**
 * Determina a progress√£o de Bloom adequada para um dom√≠nio
 */
export function getBloomProgression(domain: KnowledgeDomain, level: string, message?: string): number[] {
  // Determinar o n√≠vel efetivo baseado na mat√©ria, n√£o apenas no n√≠vel do usu√°rio
  const subjectLevel = message ? getSubjectLevel(message) : level;

  console.log(`üéì N√≠vel do usu√°rio: ${level}, N√≠vel da mat√©ria: ${subjectLevel}`);

  const progressions = {
    'technical': {
      'beginner': [1, 2, 3],
      'intermediate': [2, 3, 4, 5],
      'advanced': [3, 4, 5, 6]
    },
    'conceptual': {
      'beginner': [1, 2],
      'intermediate': [2, 3, 4],
      'advanced': [3, 4, 5, 6]
    },
    'procedural': {
      'beginner': [1, 2, 3],
      'intermediate': [2, 3, 4, 5],
      'advanced': [3, 4, 5, 6]
    },
    'factual': {
      'beginner': [1, 2],
      'intermediate': [2, 3, 4],
      'advanced': [3, 4, 5, 6]
    }
  };

  return progressions[domain.type][subjectLevel as keyof typeof progressions[typeof domain.type]] || [1, 2, 3];
}

/**
 * Analisa complexidade e sugere estrutura pedag√≥gica
 */
export function analyzePedagogicalStructure(
  message: string,
  userProfile: any
): PedagogicalAnalysis {
  const domain = analyzeDomain(message);
  const bloomProgression = getBloomProgression(domain, userProfile?.level || 'beginner', message);

  // Determinar complexidade baseada no n√≠vel e dom√≠nio
  const complexity = userProfile?.level === 'advanced' ? 'high' :
                    userProfile?.level === 'intermediate' ? 'medium' : 'low';

  // Determinar abordagem baseada no dom√≠nio
  const approachMap = {
    'technical': 'modular',
    'conceptual': 'spiral',
    'procedural': 'sequential',
    'factual': 'sequential'
  };

  // Estimar dura√ß√£o baseada no tempo dispon√≠vel e complexidade
  const timeAvailable = userProfile?.timeAvailable || '1-2 horas/dia';
  const baseHours = complexity === 'high' ? 12 : complexity === 'medium' ? 8 : 6;

  const theoryPracticeRatio = domain.type === 'procedural' ? 0.3 : 0.6; // 30% teoria para procedural, 60% para outros

  return {
    domain,
    complexity,
    recommendedApproach: approachMap[domain.type] as any,
    bloomProgression,
    estimatedDuration: {
      total: baseHours,
      theory: Math.round(baseHours * theoryPracticeRatio),
      practice: Math.round(baseHours * (1 - theoryPracticeRatio))
    }
  };
}

/**
 * Gera estrutura de t√≥picos baseada na an√°lise pedag√≥gica
 * DEPRECADO: Esta fun√ß√£o usa templates gen√©ricos e ser√° removida
 */
export function generateTopicStructure(
  analysis: PedagogicalAnalysis,
  moduleTitle: string,
  moduleIndex: number
): TopicStructure[] {
  console.warn('‚ö†Ô∏è FALLBACK: Usando sistema pedag√≥gico gen√©rico - isso n√£o deveria acontecer');

  // Retornar estrutura m√≠nima sem templates gen√©ricos
  return [
    {
      id: `module-${moduleIndex}-topic-1`,
      title: `T√≥pico Principal`,
      bloomLevel: 2,
      objectives: generateLearningObjectives('T√≥pico Principal', 2),
      prerequisites: [],
      estimatedDifficulty: 2,
      learningType: 'mixed' as const,
      subtopics: [
        {
          id: `subtopic-${Date.now()}-1`,
          title: 'Conceitos B√°sicos',
          bloomLevel: 1,
          type: 'concept' as const,
          estimatedTime: 30
        },
        {
          id: `subtopic-${Date.now()}-2`,
          title: 'Aplica√ß√£o Pr√°tica',
          bloomLevel: 3,
          type: 'application' as const,
          estimatedTime: 45
        }
      ]
    }
  ];
}

/**
 * Gera objetivos de aprendizagem baseados na Taxonomia de Bloom
 */
function generateLearningObjectives(topicTitle: string, bloomLevel: number): LearningObjective[] {
  const bloomInfo = BLOOM_TAXONOMY[bloomLevel - 1];
  const verb = bloomInfo.actionVerbs[0];

  return [{
    bloomLevel,
    statement: `${verb} os conceitos de ${topicTitle}`,
    assessmentCriteria: [
      `Demonstra compreens√£o dos conceitos principais`,
      `Aplica conhecimento em situa√ß√µes pr√°ticas`
    ],
    prerequisites: bloomLevel > 1 ? [`N√≠vel ${bloomLevel - 1} de Bloom`] : []
  }];
}

/**
 * Gera subt√≥picos espec√≠ficos baseados no dom√≠nio
 */
function generateSubtopics(
  topicTitle: string,
  bloomLevel: number,
  domain: KnowledgeDomain
): SubtopicStructure[] {
  const subtopicTypes = ['concept', 'example', 'exercise', 'application'] as const;

  return subtopicTypes.map((type, index) => ({
    id: `subtopic-${Date.now()}-${index}`,
    title: getSubtopicTitle(type, topicTitle, domain),
    bloomLevel: Math.max(1, bloomLevel - 1),
    type,
    estimatedTime: type === 'exercise' || type === 'application' ? 45 : 30
  }));
}

/**
 * Gera t√≠tulos de subt√≥picos baseados no tipo e dom√≠nio
 */
function getSubtopicTitle(
  type: 'concept' | 'example' | 'exercise' | 'application',
  topicTitle: string,
  domain: KnowledgeDomain
): string {
  const templates = {
    'concept': `Fundamentos de ${topicTitle}`,
    'example': `Exemplos Pr√°ticos`,
    'exercise': `Exerc√≠cios e Atividades`,
    'application': `Aplica√ß√£o Real`
  };

  return templates[type];
}

/**
 * Retorna t√≥picos essenciais para um dom√≠nio espec√≠fico
 */
export function getEssentialTopicsForDomain(domainName: string): string[] {
  const essentialTopics: Record<string, string[]> = {
    'mathematics': [
      'conceitos fundamentais',
      'opera√ß√µes b√°sicas',
      'propriedades',
      'aplica√ß√µes',
      'resolu√ß√£o de problemas'
    ],
    'engineering': [
      'fundamentos te√≥ricos',
      'princ√≠pios b√°sicos',
      'an√°lise',
      'design',
      'implementa√ß√£o',
      'valida√ß√£o'
    ],
    'programming': [
      'sintaxe b√°sica',
      'estruturas de dados',
      'algoritmos',
      'paradigmas',
      'pr√°ticas de desenvolvimento',
      'debugging'
    ],
    'science': [
      'conceitos fundamentais',
      'metodologia cient√≠fica',
      'experimentos',
      'an√°lise de dados',
      'conclus√µes'
    ],
    'business': [
      'fundamentos',
      'estrat√©gia',
      'opera√ß√µes',
      'an√°lise',
      'implementa√ß√£o',
      'avalia√ß√£o'
    ]
  };

  return essentialTopics[domainName.toLowerCase()] || [];
}

/**
 * Detecta n√≠vel de Bloom baseado no texto
 */
export function detectBloomLevel(text: string): number {
  const lowerText = text.toLowerCase();

  // Palavras-chave por n√≠vel de Bloom
  const bloomKeywords = {
    1: ['definir', 'listar', 'identificar', 'nomear', 'descrever', 'conceitos', 'introdu√ß√£o'],
    2: ['explicar', 'comparar', 'interpretar', 'resumir', 'compreender', 'entender'],
    3: ['aplicar', 'usar', 'implementar', 'resolver', 'praticar', 'exercitar'],
    4: ['analisar', 'examinar', 'investigar', 'classificar', 'categorizar'],
    5: ['sintetizar', 'criar', 'desenvolver', 'projetar', 'construir', 'formular'],
    6: ['avaliar', 'julgar', 'criticar', 'justificar', 'validar', 'recomendar']
  };

  let maxLevel = 1;
  let maxMatches = 0;

  for (const [level, keywords] of Object.entries(bloomKeywords)) {
    const matches = keywords.filter(keyword => lowerText.includes(keyword)).length;

    if (matches > maxMatches) {
      maxMatches = matches;
      maxLevel = parseInt(level);
    }
  }

  return maxLevel;
}